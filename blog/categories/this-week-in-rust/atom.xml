<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: this-week-in-rust | Rust 'n Stuffs]]></title>
  <link href="http://cmr.github.io/blog/categories/this-week-in-rust/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2014-04-14T00:55:57-04:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/04/13/this-week-in-rust/"/>
    <updated>2014-04-13T23:06:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/04/13/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>64 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>BenchHarness</code> <a href="https://github.com/mozilla/rust/pull/13236">has been
renamed</a> to <code>Bencher</code></li>
<li>The <code>push_str</code> and <code>push_char</code> methods on <code>~str</code> <a href="https://github.com/mozilla/rust/pull/13440">have been
removed</a>, and a <code>StrBuf</code> type
added, as an analog to <code>Vec</code>.</li>
<li>Duplicate moves from the variables a <code>proc</code> captures <a href="https://github.com/mozilla/rust/pull/13413">are no longer
allowed</a>.</li>
<li><code>std::libc</code> <a href="https://github.com/mozilla/rust/pull/13315">has been extracted</a>
into its own crate.</li>
<li>Various bugs in resolve <a href="https://github.com/mozilla/rust/pull/13409">have been
fixed</a>. The fixes seem
relatively obscure, but they&rsquo;re well documented if your code breaks.</li>
<li>The functions in <code>flate</code> now <a href="https://github.com/mozilla/rust/pull/13389">return Option instead of
failing</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li><code>TotalEq</code> and <code>TotalOrd</code> <a href="https://github.com/mozilla/rust/pull/13358">now
document</a> exactly what the types
implementing them must guarantee.</li>
<li>Some bugs with debuginfo <a href="https://github.com/mozilla/rust/pull/13441">have been
fixed</a>. In particular, the
annoying link failure with debuginfo has been fixed.</li>
<li>Relocation model <a href="https://github.com/mozilla/rust/pull/13340">is now
configurable</a> with <code>-C
relocation-model</code>.</li>
</ul>


<p>Additionally, a lot of cleanup happened. Not much of it sticks out particularly.</p>

<h2>New Contributors</h2>

<ul>
<li>Boris Egorov</li>
<li>Jim Radford</li>
<li>Joseph Crail</li>
<li>JustAPerson</li>
<li>Kasey Carrothers</li>
<li>Kevin Butler</li>
<li>Manish Goregaokar</li>
<li>Tobba</li>
<li>free-Runner</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The weekly meeting was cancelled due to the videoconference system being down
for mitigating the Heartbleed vulnerability, as well as some team members
travelling or otherwise unavailable.</p>

<h1>RFCs</h1>

<p>Some new RFCs:</p>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/36">Extend nullable pointer optimization to library
types</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/37">Extended method lookup</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/38">Inherit use</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/39">Allocator trait</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/40">Make libstd a facade</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/41"><code>Invalid</code> trait for space optimization of
enums</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/42">Add a regexp crate to the Rust
distribution</a></li>
</ul>


<h1>Project Updates</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/22y6oy/acronymy_a_web_app_written_in_rust/">Acronymy</a>
has been released. This is a web application (in Rust!) for defining words as
acronyms. It&rsquo;s pretty fun.</li>
<li><a href="https://github.com/cmr/bitmap-rs">bitmap</a> has been released</li>
<li><a href="https://github.com/BurntSushi/regexp/">regexp</a> is a pure-Rust
implementation of RE2, with wonderful docs and support for statically
compiling regular expressions.</li>
<li><a href="http://www.reddit.com/r/rust/comments/22uirj/rustempty_02_released/">rust-empty</a>
has been updated to 0.2.</li>
<li><a href="https://github.com/hannobraun/inotify-rs">inotify-rs</a> has been released,
bindings to inotify.</li>
<li><a href="https://github.com/bwo/unlambda/blob/master/unlambda.rs">An unlambda
interpreter</a></li>
<li><a href="https://github.com/aochagavia/RusticMineSweeper">RusticMineSweeper</a>, a
minesweeper clone.</li>
<li><a href="https://github.com/erickt/rust-mustache/tree/v0.3.0">rust-mustache</a> has
been updated to 0.3.0.</li>
<li><a href="https://github.com/dnaq/sodiumoxide">sodiumoxide</a>, the libsodium bindings,
have been updated for 0.10.</li>
</ul>


<h1>Community</h1>

<ul>
<li>On April 17, there will be an <a href="http://www.meetup.com/nyccpp/events/168545012/">Introduction to
Rust</a> by Clark Gaebel in new
York City, during a C++ meetup.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-April/009490.html">Bay Area
Rust</a>&rsquo;s
plans for May have been announced.</li>
</ul>


<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test cases for the Rust language.</p>

<p>In the last week, we landed 30 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>ms2ger cleaned up all of the trailing whitespace that had been nagging down
our Critic reviews in <a href="https://github.com/mozilla/servo/pull/2055">#2055</a></li>
<li>Jacob Parker added a reftest for <code>setAttribute</code>-based restyling in
<a href="https://github.com/mozilla/servo/pull/2062">#2062</a></li>
<li>Sankha Narayan Guria removed XRay from the script codegen in
<a href="https://github.com/mozilla/servo/pull/2050">#2050</a></li>
<li>Peiyong Lin moved <code>namespaceURI</code> to the <code>Element</code> type in
<a href="https://github.com/mozilla/servo/pull/2063">#2063</a> and removed all
remaining <code>@</code> boxes in <a href="https://github.com/mozilla/servo/pull/2085">#2085</a></li>
<li>Matt Brubeck fixed bugs related clicking on links in
<a href="https://github.com/mozilla/servo/pull/2068">#2068</a> and
<a href="https://github.com/mozilla/servo/pull/2084">#2084</a> and
<a href="https://github.com/mozilla/servo/pull/2080">#2080</a></li>
<li>Hyun June Kim added support for pseudo-elements attached to inline elements
in <a href="https://github.com/mozilla/servo/pull/2071">#2071</a></li>
<li>Manish Goregaokar cleaned up a whole bunch of warnings left after our last
Rust update in <a href="https://github.com/mozilla/servo/pull/2045">#2045</a></li>
<li>Lars Bergstrom got Android support working in Servo master in
<a href="https://github.com/mozilla/servo/pull/2070">#2070</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Jacob Parker (j3parker)</li>
</ul>


<h2>Meetings and Notes</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-04-07">meeting</a>, we went
over our <a href="https://github.com/mozilla/servo/wiki/Roadmap">Q2 roadmap</a>, status
of an Android buildbot, testing, and the ever-present issue of improving our
build system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/04/05/this-week-in-rust/"/>
    <updated>2014-04-05T05:06:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/04/05/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>0.10 <a href="https://mail.mozilla.org/pipermail/rust-dev/2014-April/009387.html">was released</a> this week, and with it comes a redesign of the
websites and official nightlies.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>62 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The <code>map</code> and <code>flat_map</code> methods <a href="https://github.com/mozilla/rust/pull/13203">have been
removed</a> from <code>Vec&lt;T&gt;</code>, the are
superseded by their iterator equivalents (of the same name).</li>
<li><code>FromIterator::from_iterator</code> <a href="https://github.com/mozilla/rust/pull/13220">has been
renamed</a> to <code>from_iter</code>.</li>
<li><code>std::vec::{append, append_one}</code> <a href="https://github.com/mozilla/rust/pull/13221">have been turned into
methods</a>.</li>
<li>struct fields <a href="https://github.com/mozilla/rust/pull/13184">are now private by
default</a>. Similarly, fields of
tuple structs <a href="https://github.com/mozilla/rust/pull/13237">are also private by
default</a>.</li>
<li><code>std::num</code> <a href="https://github.com/mozilla/rust/pull/13225">has seen some
cleanup</a>. The <code>cmath</code> module has
been removed from the public API and the various wrapper functions on float
types have been removed.</li>
<li><code>Rng::shuffle_mut</code> <a href="https://github.com/mozilla/rust/pull/13177">has been
renamed</a> to <code>shuffle</code>.</li>
<li>Vectors, arrays, and slices <a href="https://github.com/mozilla/rust/pull/13257">require <code>uint</code> indices
now</a>. Previously they accepted
any integer type.</li>
<li>Static string constants <a href="https://github.com/mozilla/rust/pull/13291">no longer include a null
terminator</a>. This was
accidentally leftover from when all strings were implicitly
null-terminated. This may break code that incorrectly assumed strings were
null-terminated.</li>
<li>The <code>concat_idents</code> macro <a href="https://github.com/mozilla/rust/pull/13295">is now feature
gated</a>.</li>
<li><code>RefCell::get</code> and <code>RefCell::set</code> <a href="https://github.com/mozilla/rust/pull/13301">have been
removed</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>rustc <a href="https://github.com/mozilla/rust/pull/13284">now gives file paths</a>
when reporting duplicate crates found.</li>
<li><code>std::cmp</code> <a href="https://github.com/mozilla/rust/pull/12956">has some nice new
documentation</a>.</li>
<li>The manual <a href="https://github.com/mozilla/rust/pull/13207">now has</a> an updated
list of what attributes are valid and what they do.</li>
<li>Built-in syntax extensions <a href="https://github.com/mozilla/rust/pull/13255">are now
documented</a>.</li>
<li><code>AtomicInt</code> and <code>AtomicUint</code> <a href="https://github.com/mozilla/rust/pull/12964">now have atomic bitwise
operations</a>.</li>
<li>The <code>Show</code> implementation for <code>Cell</code> <a href="https://github.com/mozilla/rust/pull/13243">has been
fixed</a> to actually print the
contents of the Cell.</li>
<li>Macros in statement and expression position <a href="https://github.com/mozilla/rust/pull/13234">can now be delimited by square
brackets</a>.</li>
<li>The <code>k-nucleotide</code> benchmark <a href="https://github.com/mozilla/rust/pull/13206">has been fixed to pass the official shootout
tests</a>.</li>
<li>A nasty bug which would cause <code>Arc</code>s to leak <a href="https://github.com/mozilla/rust/pull/13211">has been
fixed</a>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Benjamin Adamson</li>
<li>Christopher Kendell</li>
<li>Falco Hirschenberger</li>
<li>Gábor Lehel</li>
<li>Ivan Petkov</li>
<li>Scott Jenkins</li>
<li>Timothée Ravier</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-04-01">weekly
meeting</a>
discussed Vec versus <code>~[T]</code>, the intrinsics RFC, and StrBuf.</p>

<h1>RFCs</h1>

<p>Some new RFCs:</p>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/34">Check actual type parameters against their
bounds</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/33">Change return type of str::replace to
MaybeOwned</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/29">Bit fields and matching</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/27">Use different keywords for declaring tagged unions and C-style
enums</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/26">Remove the <code>priv</code> keyword</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/24">Unify and nest structs and
enums</a></li>
</ul>


<h1>Project Updates</h1>

<ul>
<li><a href="https://github.com/LeoTestard/rustlex">rustlex</a>, a syntax extension for
generating regular expression-based lexers.</li>
<li>farcaller <a href="http://www.reddit.com/r/rust/comments/21qogc/im_making_a_note_here_huge_embedded_success/">has shown a
demo</a>
of Rust on an ARM dev board.</li>
<li><a href="http://www.reddit.com/r/rust/comments/21tplw/writing_an_asterisk_module_using_rust/">A sample Asterisk
module</a>,
in Rust</li>
<li><a href="http://alan-andrade.github.io/rust/javascript/2014/03/31/parallel_js_compression.html">Parallel JS
Compression</a>
in Rust.</li>
<li><a href="https://github.com/tedsta/rust-brainfuck/blob/master/main.rs">A Brainfuck
Interpreter</a>
in 43 lines.</li>
<li><a href="https://github.com/Geal/rustfix">rustfix</a>, a simple regex-based upgrading
tool.</li>
<li><a href="http://www.reddit.com/r/rust/comments/229fze/rustiteratorcomprehensions_nest_filter_and_map/">rust-iteratorcomprehensions</a>,
a list comprehension syntax for iterators.</li>
</ul>


<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>In the last week, we landed 18 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton (along with commits from Juneyoung Cho and Hyun June Kim) landed ACID2 support in <a href="https://github.com/mozilla/servo/pull/1988">#1988</a></li>
<li>ms2ger landed a new Rust upgrade, bringing us to late March in <a href="https://github.com/mozilla/servo/pull/2041">#2041</a></li>
<li>Martin Robinson move the active timers for the <code>Window</code> object into a <code>HashMap</code> in <a href="https://github.com/mozilla/servo/pull/2002">#2002</a></li>
<li>Manish Goregaokar made attribute getter/setters case insensitive in <a href="https://github.com/mozilla/servo/pull/2043">#2043</a></li>
<li>Tetsuharu Ohzeki cleaned up <code>Document::create_collection</code> in <a href="https://github.com/mozilla/servo/pull/2031">#2031</a></li>
<li>Peiyong Lin got rid of match statements in layout queries in <a href="https://github.com/mozilla/servo/pull/2022">#2022</a></li>
<li>Bruno de Oliveira Abinader added support for the ASCII whitespace check in <a href="https://github.com/mozilla/servo/pull/2032">#2032</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Martin Robinson</li>
</ul>


<h2>Meetings and Notes</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-31">meeting</a>, we
discussed how to demo ACID2, gave a quick overview of our Q2 agenda, talked
about the tentative Servo workweek date (June 2), and wrapped up where the
rest of the layout features are at now that we have closed down the ACID2
push.</p>

<p>Courtesy of Manish Goregaokar, we now have a
<a href="https://badges.mozilla.org/en-US/badges/badge/Servo-Rust-upgrade">badge</a> for
those brave memebers of the Servo community who participate in the Sisyphean
task of upgrading the version of Rust used in Servo. Thanks, Manish!</p>

<h1>Community</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/21m5jf/rust_vs_go/">Rust vs Go</a></li>
<li><a href="https://www.facebook.com/rustlang">Rust is now on Facebook</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/21ofma/how_similar_is_rust_to_go/">How similar is Rust to
Go?</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/21t8n8/safe_synchronization_primitives_and_their/">Safe Synchronization Primitives and their
implementation</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/21wu1c/simple_typebased_alias_analysis_for_rust/">Simple Type-Based Alias Analysis for
Rust</a></li>
<li>Reminder: <code>~[T]</code> <a href="http://www.reddit.com/r/rust/comments/2213vw/reminder_t_is_not_going_away/">is not going away</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/2212j2/higherkinded_polymorphism/">Higher-kinded
polymorpihsm</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/226ax6/a_more_detailed_tour_of_the_rust_compiler/">A More Detailed Tour of the Rust
Compiler</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/228ou3/another_brain_dump_data_structures/">Another brain dump &ndash; data
structures</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/227o5n/rust_me_im_a_developer_slides_and_commentary_from/">Rust Me, I&rsquo;m a
Developer!</a>,
(slides and commentary from a talk given at Stir Trek 2014)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/29/this-week-in-rust/"/>
    <updated>2014-03-29T21:56:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/03/29/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>The 0.10 release will likely be this week. 3 months from 0.9 is April 3.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>63 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The <code>sync</code> crate <a href="https://github.com/mozilla/rust/pull/12900">has seen some significant
cleanup</a>. In particular,
<code>RWArc&lt;T&gt;</code> and <code>MutexArc&lt;T&gt;</code> have been removed. <code>Mutex&lt;T&gt;</code> and <code>RWLock&lt;T&gt;</code>
have been introduced, and can be used as <code>Arc&lt;Mutex&lt;T&gt;&gt;</code> and
<code>Arc&lt;RWLock&lt;T&gt;&gt;</code> to replace <code>RWArc</code> and <code>MutexArc</code>. There are some other
minor changes, see the pull request.</li>
<li>Taking a reference to a static whose type contains an <code>Unsafe&lt;T&gt;</code> somewhere
<a href="https://github.com/mozilla/rust/pull/13083">is now forbidden</a>.</li>
<li><code>Extendable</code> and <code>FromIterator</code> <a href="https://github.com/mozilla/rust/pull/13039">now take their argument
by-value</a>.</li>
<li>The crate map <a href="https://github.com/mozilla/rust/pull/13117">has been
removed</a>, and with it a
significant amount of complexity. As a consequence of its removal,
<code>green::start</code> now takes the event loop it should use as an argument rather
than looking in the crate map. <a href="http://static.rust-lang.org/doc/master/green/index.html#starting-with-libgreen">The documentation has an
example</a></li>
<li>The syntax for bounds on generic paths <a href="https://github.com/mozilla/rust/pull/13079">has
changed</a> from
<code>Foo:Bound&lt;Params&gt;</code> to <code>Foo&lt;Params&gt;:Bound</code>.</li>
<li>The default <code>Send</code> bound on trait objects <a href="https://github.com/mozilla/rust/pull/13050">has been
removed</a>.</li>
<li>The <code>serialize</code> infrastructure <a href="https://github.com/mozilla/rust/pull/13107">now supports error reporting via
<code>Result</code></a>.</li>
<li><code>Pod</code> <a href="https://github.com/mozilla/rust/pull/13160">has been renamed</a> to
<code>Copy</code>.</li>
<li>The attribute syntax <a href="https://github.com/mozilla/rust/pull/13162">has
changed</a>. Rather than saying
<code>#[crate_type = "bin"];</code> (with a significant semicolon), you say
<code>#![crate_type = "bin"]</code> (no semicolon).</li>
<li><code>collections::List</code> <a href="https://github.com/mozilla/rust/pull/13183">has been
removed</a>. Use a vector, or
<code>collections::DList</code> if you really want a linked list. Persistent data
structures will live in a different crate than <code>collections</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>A <code>fill</code> method <a href="https://github.com/mozilla/rust/pull/13049">has been added</a>
to <code>Reader</code>, for reading an exact amount of bytes or erroring.</li>
<li>As
<a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007924.html">discussed</a>
on the mailing list some months ago, <a href="https://github.com/mozilla/rust/pull/12991">synchronous, bounded
channels</a> have been added.</li>
<li><code>Share</code>&rsquo;s documentation <a href="https://github.com/mozilla/rust/pull/13070">has been
expanded</a>.</li>
<li>A straggler from the doc sprint, <a href="https://github.com/mozilla/rust/pull/13135">a few hundred lines of
documentation</a> have been added
to <code>std</code>.</li>
<li>Some handy methods <a href="https://github.com/mozilla/rust/pull/12780">have been
added</a> to <code>Json</code> to make
searching and selecting elements from JSON objects easier.</li>
<li>There&rsquo;s a <a href="https://github.com/mozilla/rust/pull/13108">new warn-by-default
lint</a> for deriving traits on
types which contain raw pointers.</li>
<li>Many confusing lifetime-related ICE&rsquo;s <a href="https://github.com/mozilla/rust/pull/13157">have been
fixed</a>. This is good progress
towards closing <a href="https://github.com/mozilla/rust/issues/5121">the notorious issue
5121</a>.</li>
<li>We can now <a href="https://github.com/mozilla/rust/pull/13143">emit debuginfo for
<code>static</code>s</a>. Yay debuginfo!</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Davis Silverman</li>
<li>Noam Gagliardi Rabinovich</li>
<li>Sean McArthur</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-03-25">meeting this
week</a>
discussed various things: attribute parsing in macros, opt-in built-in traits,
SIMD, allowing square brackets in macro invocation, allowing bounds on type
parameters in structs, private fields by default, the fate of
<code>collections::List</code>, and bounds on trait paths.</p>

<h1>RFCs</h1>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/23">Smaller refcounts</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/22">Deserializing to a stream of tagged
values</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/20">Allow bounds on all type
parameters</a></li>
</ul>


<h1>Project Updates</h1>

<ul>
<li><a href="https://github.com/KokaKiwi/rust-highlight">rust-highlight</a> can be used to
highlight Rust code in LaTeX, HTML, and JSON.</li>
<li><a href="https://github.com/arjantop/rust-tabular">rust-tabular</a>, a library for
handling delimiter-separated values (commas, tabs, or any other character),
as well as fixed columns of fixed width.</li>
<li><a href="https://github.com/BurntSushi/rust-csv">rust-csv</a>, a CSV library which
implements <code>Encoder</code> and <code>Decoder</code> for <code>serialize</code> support.</li>
</ul>


<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>In the last two weeks, we landed 33 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Lars Bergstrom landed a Rust upgrade, bringing us to late February in
<a href="https://github.com/mozilla/servo/pull/1934">#1934</a></li>
<li>ms2ger cleaned up some sketchy use of unsafe native pointers, wrapping them
in a <code>JS&lt;T&gt;</code> in <a href="https://github.com/mozilla/servo/pull/1915">#1915</a></li>
<li>Matt Brubeck named the WorkQueue tasks so that we&rsquo;ll know where failure is
coming from during parallel layout in
<a href="https://github.com/mozilla/servo/pull/1977">#1977</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Matt Brubeck (mbrubeck)</li>
</ul>


<h2>Meetings and Notes</h2>

<p>Patrick Walton authored and combined the final set of changes required to get
Servo <a href="https://twitter.com/pcwalton/status/449299846873108480">passing ACID2</a>!</p>

<p>Matthew Brubeck has joined the Servo team full-time, coming over from the
Firefox Metro project.</p>

<p>In the meeting <a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-17">two weeks
ago</a>, we discussed
the Rust upgrade, z-index support, and ACID2. In the most recent
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-24">meeting</a>, we
provided an update on ACID2 and the status of Servo on Android.</p>

<h1>Other Announcements</h1>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/009223.html">Official Installers and
Nightlies</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/24/this-week-in-rust/"/>
    <updated>2014-03-24T23:33:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/03/24/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This weeks flips the switch from libgreen-by-default to libnative-by-default.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>91 pull requests were merged this week, topping the <a href="http://cmr.github.io/blog/2014/02/23/this-week-in-rust/">previous
record</a> of 89.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Logging <a href="https://github.com/mozilla/rust/pull/12791">has been extracted to its own
crate</a>. Using the logging macros
(<code>debug!</code> etc) now requires a <code>#[phase(syntax, link)] extern crate log;</code>.</li>
<li>The <code>AtomicFlag</code> type <a href="https://github.com/mozilla/rust/pull/12951">has been
removed</a>.</li>
<li><code>std::vec</code> <a href="https://github.com/mozilla/rust/pull/12772">has been renamed</a> to
<code>std::slice</code>, and the old <code>std::vec_ng</code> <a href="https://github.com/mozilla/rust/pull/13028">moved into its
place</a>.</li>
<li>A <code>Share</code> built-in trait <a href="https://github.com/mozilla/rust/pull/12686">has been
added</a>. It also adds an
<code>Unsafe&lt;T&gt;</code> type, which is now the <em>only</em> &ldquo;safe&rdquo; way of achieving internal
mutability (what the <code>Cell</code> types etc do). This <code>Share</code> trait means that the
type is thread-safe. See the pull request for more details. In particular,
taking the address of a static who contains an <code>Unsafe</code> member is not
allowed.</li>
<li><code>std::cast::transmute_immut_unsafe</code> <a href="https://github.com/mozilla/rust/pull/13015">has been
removed</a> because it is
expressible by safe code.</li>
<li><code>libnative</code> <a href="https://github.com/mozilla/rust/pull/12833">is now the default
runtime</a>. In the process, the
<code>#[no_uv]</code> attribute was renamed to <code>#[no_start]</code>.</li>
<li>Atomics <a href="https://github.com/mozilla/rust/pull/13036">no longer require mutable references to
change</a>, due to the work on
<code>Share</code>, they can safely use interior mutability. Additionally, the generic
atomics have been hidden and <code>AtomicU64</code> has been removed, because not all
targets support it.</li>
<li>The <code>push_bytes</code> and <code>read_bytes</code> methods on <code>Reader</code> and <code>Writer</code> <a href="https://github.com/mozilla/rust/pull/12907">have
been renamed</a> for clarity.</li>
<li><code>RefCell::with</code> and <code>RefCell::with_mut</code> <a href="https://github.com/mozilla/rust/pull/13052">have been
removed</a>, because the Deref
changes make them unnecessary.</li>
<li>The <code>get</code> methods on <code>Ref</code> and <code>RefMut</code> (helpers returned by <code>RefCell</code>)
<a href="https://github.com/mozilla/rust/pull/13053">have been removed</a>, because
the Deref changes make them unnecessary.</li>
<li>The <code>Freeze</code> trait <a href="https://github.com/mozilla/rust/pull/13076">has been
removed</a></li>
<li><code>std::managed</code> <a href="https://github.com/mozilla/rust/pull/13089">has been
removed</a> from the public API.</li>
<li><code>HashMap</code> <a href="https://github.com/mozilla/rust/pull/13088">now correctly uses
<code>TotalEq</code></a>.</li>
<li>The <code>to_owned_vec</code> method on <code>Iterator</code> <a href="https://github.com/mozilla/rust/pull/13090">has been
removed</a>.</li>
<li>The <code>equals</code> method <a href="https://github.com/mozilla/rust/pull/13102">has been
removed</a> from <code>TotalEq</code>, due to
the recent changes in <code>TotalEq</code>&rsquo;s semantics.</li>
<li>Trait implementations may <a href="https://github.com/mozilla/rust/pull/13006">no
longer</a> implement a method
twice.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Some bugs with cross-crate autoderef <a href="https://github.com/mozilla/rust/pull/13087">have been
fixed</a>.</li>
<li>Some Windows issues with non-English locales <a href="https://github.com/mozilla/rust/pull/13078">have been
fixed</a>.</li>
<li>Removing two words from a structure in libsyntax <a href="https://github.com/mozilla/rust/pull/13016">shaved 100MB off the
librustc compile</a>.</li>
<li>Some well-placed indirection in librustc <a href="https://github.com/mozilla/rust/pull/13013">shaved 200MB off the librustc
compile</a>.</li>
<li>Discarding some data after it&rsquo;s no longer useful <a href="https://github.com/mozilla/rust/pull/12770">shaved another 100MB off
the librustc compile</a>.</li>
<li>The new attribute syntax <a href="https://github.com/mozilla/rust/pull/13037">has been
implemented</a>, though the old has
not yet been replaced.</li>
<li><code>Vec</code> is <a href="https://github.com/mozilla/rust/pull/13020">now in the prelude</a>,
as well as the lint for uses of <code>~[T]</code> being made allow by default.</li>
<li>Some false positives for crate searching <a href="https://github.com/mozilla/rust/pull/13017">have been
fixed</a>.</li>
<li>A few bugs with struct ABI on x86 <a href="https://github.com/mozilla/rust/pull/12762">have been
fixed</a>.</li>
<li>Mutable slices in <code>static mut</code> <a href="https://github.com/mozilla/rust/pull/12742">are now
allowed</a>.</li>
<li>Some <code>@</code> has been removed from rustc, <a href="https://github.com/mozilla/rust/pull/12735">yielding an 11k line
patch</a>.</li>
<li><code>bigint</code> <a href="https://github.com/mozilla/rust/pull/12924">has seen some
optimization</a>, though not major.</li>
</ul>


<p>The <a href="http://www.meetup.com/Rust-Bay-Area/events/168366122/">doc sprint</a>
happened last week. A bunch of pull requests for docs for this landed:</p>

<ul>
<li><code>std::ops</code> (from the rollup)</li>
<li><a href="https://github.com/mozilla/rust/pull/12940"><code>time::Tm</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12942"><code>getopts</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12944">Endian conversion in
<code>std::mem</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12954"><code>std::sync::atomics</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12955"><code>std::vec_ng</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12982"><code>std::option</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12948"><code>term</code></a></li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Eunchong Yu</li>
<li>Jonathan S</li>
<li>Jorge Aparicio</li>
<li>Ms2ger</li>
<li>Olle Jonsson</li>
<li>Ryan Scheel (Havvy)</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-03-18">weekly
meeting</a>
discussed using GitHub for RFCs, the docsprint, and one of the RFCs.</p>

<h1>RFCs</h1>

<p>Some new RFCs:</p>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/12">Tweaked Variance Inference</a></li>
<li>Another struct inheritance RFC, <a href="https://github.com/rust-lang/rfcs/pull/11">extending
enums</a></li>
<li>Another one, <a href="https://github.com/rust-lang/rfcs/pull/10"><code>abstract struct</code> and <code>abstract
enum</code></a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/18">Unsurprising module imports</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/17"><code>Iterable</code> trait family</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/16">Attributes on match arms and
statements</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/15">SIMD Support</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/19">Opt-in builtin traits</a></li>
</ul>


<h1>Project Updates</h1>

<p><a href="https://github.com/dobkeratops/rustfind">rustfind</a>, doomlord&rsquo;s code browser
for Rust, <a href="http://www.reddit.com/r/rust/comments/20q3uz/rustfind_code_browser/">has been updated</a>.
This is a very nice librustc-integrated tool that supports jump-to-definition.</p>

<p>Relatedly, I&rsquo;m reminded of <a href="https://github.com/dobkeratops/unfold">unfold</a>,
doomlord&rsquo;s tool for displaying &ldquo;brace context&rdquo; of code. It includes an &ldquo;rg&rdquo;
script, which is a simple grep for item definitions.</p>

<p>In leiu of a &ldquo;This Week in Servo&rdquo;, Servo <a href="http://imgur.com/a/O667X">has been making
progress</a> on <a href="http://acid2.acidtests.org/">Acid2</a>.</p>

<h1>Other Announcements</h1>

<ul>
<li><a href="http://nethack4.org/blog/memory.html">Memory Management in C Programs</a> &mdash;
this is a very well written article from the nethack team. All the concepts
discussed within apply to Rust.</li>
<li><a href="http://blog.babelmonkeys.de/2014/03/18/dst.html">Dynamically Sized Types in
Rust</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/009087.html">Announcing the new Rust package manager,
Cargo</a>.
It&rsquo;s on <a href="https://github.com/carlhuda/cargo">github</a>.</li>
<li><a href="http://dwarfstd.org/ShowIssue.php?issue=140129.1">Rust is in the next DWARF
standard!</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/20nnkk/rust_and_emscripten_a_small_success/">A success story of Rust and
emscripten</a></li>
<li><a href="http://www.meetup.com/Rust-London-User-Group/">A Rust meetup group in
London</a></li>
<li><a href="http://featherweightmusings.blogspot.com.br/2014/03/subtyping-and-coercion-in-rust.html">Subtyping and coercion in
Rust</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/15/this-week-in-rust/"/>
    <updated>2014-03-15T23:33:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/03/15/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>66 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Some more string methods <a href="https://github.com/mozilla/rust/pull/12797">now return
Option</a>.</li>
<li>Matching on <code>~str</code> <a href="https://github.com/mozilla/rust/pull/12756">has been
removed</a>.</li>
<li>IO iterators <a href="https://github.com/mozilla/rust/pull/12414">now yield
IoResult</a>.</li>
<li>The channel types and constructor <a href="https://github.com/mozilla/rust/pull/12815">have been
renamed</a>. <code>Chan</code> is now <code>Sender</code>,
<code>Port</code> is now <code>Receiver</code>, and <code>Chan::new</code> is now <code>std::comm::channel</code>.</li>
<li><code>std::cmp::{min, max}</code> <a href="https://github.com/mozilla/rust/pull/12869">now require
TotalOrd</a>. For floats, use
<code>a.min(b)</code>.</li>
<li>The handling of <code>cfg(not(a, b))</code> <a href="https://github.com/mozilla/rust/pull/12893">has changed
slightly</a>.</li>
<li><code>libextra</code> <a href="https://github.com/mozilla/rust/pull/12896">has finally been
purged</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Another great PR from the illustrious ktt3ja, the compiler <a href="https://github.com/mozilla/rust/pull/12238">will now give
suggestions</a> on how to fix
lifetime woes. This is an awesome usability improvement.</li>
<li>Implementations of <code>Deref</code> and <code>DerefMut</code> <a href="https://github.com/mozilla/rust/pull/12610">are now
considered</a> for automatic
dereferencing.</li>
<li>Partial type hints <a href="https://github.com/mozilla/rust/pull/12764">are now
implemented</a>, but not at the item
level (in function returns etc). The eventual goal is to have
<code>some_iter.collect::&lt;Vec&lt;_&gt;&gt;()</code> be possible.</li>
<li>There is a <a href="http://static.rust-lang.org/doc/master/guide-unsafe.html">new
guide</a> for &ldquo;low level and unsafe code&rdquo;.
<a href="https://github.com/mozilla/rust/pull/12887">PR</a>.</li>
<li>There is now a lint for <a href="https://github.com/mozilla/rust/pull/12861">uses of
<code>~[T]</code></a>. It&rsquo;s very verbose. The
replacement for <code>~[T]</code>, as recommended by the lint, is <code>std::vec_ng::Vec&lt;T&gt;</code>.
It implements almost everything <code>~[T]</code> does.</li>
<li><code>HashMap</code> <a href="https://github.com/mozilla/rust/pull/12081">has been
reimplemented</a> to use <a href="http://codecapsule.com/2013/11/11/robin-hood-hashing/">Robin Hood
hashing</a>. It&rsquo;s now much
more faster, and uses less space.</li>
<li>Support for basic backtracing <a href="https://github.com/mozilla/rust/pull/12602">has been
reimplemented</a>.</li>
<li><code>char</code> <a href="https://github.com/mozilla/rust/pull/12561">now has simple case
folding</a>. That is, basic
locale-ignorant case conversion.</li>
<li><p>Inline assembly <a href="https://github.com/mozilla/rust/pull/12798">now supports the <code>+</code>
modifier</a>.</p>

<h2>New Contributors</h2></li>
<li><p>Adolfo Ochagavía</p></li>
<li>Clark Gaebel</li>
<li>Peter Marheine</li>
<li>Piotr Czarnecki</li>
<li>Piotr Zolnierek</li>
<li>Robert Gawdzik</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-03-11">weekly
meeting</a>
discussed the new hashmap, destructuring the <code>self</code> argument, partial type
hints, coercion of returned values, as well as the requirements of unsafe
pointers and the continued existence of <code>*mut</code>.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>In the last two weeks, we landed 56 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton made fixes to ACID in
<a href="https://github.com/mozilla/servo/pull/1905">#1905</a></li>
<li>Along with about 20 other PRs, ms2ger brought WindowTimers up to date with
the spec in <a href="https://github.com/mozilla/servo/pull/1890">#1890</a></li>
<li>Pradeep Kumar implemented <code>position:absolute</code> in
<a href="https://github.com/mozilla/servo/pull/1681">#1681</a> and fixed up relative
positioning in <a href="https://github.com/mozilla/servo/pull/1808">#1808</a></li>
<li>Bill Yang fixed up our instructions for installation on Ubuntu Linux in
<a href="https://github.com/mozilla/servo/pull/1881">#1881</a></li>
<li>Bruno Abinader fixed up HTMLCollection in
<a href="https://github.com/mozilla/servo/pull/1838">#1838</a></li>
<li>Isabelle Carter ensured that children of <code>position:fixed</code> items make it into
the correct DisplayList in <a href="https://github.com/mozilla/servo/pull/1832">#1832</a></li>
<li>Manish Goregaokar made <code>getElementsByName</code> return a <code>NodeList</code> in
<a href="https://github.com/mozilla/servo/pull/1756">#1756</a></li>
<li>Keegan McAllister cleaned up our reftest harness and made them test both the
CPU and GPU rendering paths in
<a href="https://github.com/mozilla/servo/pull/1804">#1804</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Bill Yang (analyst74)</li>
<li>Manish Goregaokar (manishearth)</li>
</ul>


<h2>Meetings and Notes</h2>

<p>At this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-10">meeting</a>, we
discussed HTML parsing, embedding, writing modes, the ACID2 burndown, and the
Rust upgrade.</p>

<h1>RFCs</h1>

<p><a href="https://github.com/rust-lang/rfcs/blob/master/active/0001-rfc-process.md">We have a new RFC
process</a>!
Every week I&rsquo;ll list the new RFCs and RFCs that have been accepted.
Contributing to the discussions around these RFCs is the easiest way to drive
the design of Rust.</p>

<p>As an aside, I will no longer include any RFCs in the &ldquo;Announcements&rdquo; section
that are not sent to the RFC repository.</p>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/1">Private Fields by Default</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/3">Rearchitecting the attribute-usage lint</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/4">Unified Function Call Syntax</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/5">Virtual Structs</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/7">Add OsUnknown as a target operating system</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/8">Redesign Compiler Intrinsics</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/9">&ldquo;Fat Objects&rdquo; for DSTs</a>, an
alternative to &ldquo;Virtual Structs&rdquo;.</li>
</ul>


<h1>Project Updates</h1>

<p><a href="https://github.com/arjantop/rust-bencode">rust-bencode</a>, a pure Rust
implementation of Bencode encoding.
<a href="http://en.wikipedia.org/wiki/Bencode">Bencode</a> is used primarily in the
BitTorrent protocol. This implementation leverages the <code>serialize</code> crate for
automatic Encodable/Decodable implementation as well as custom, more flexible
FromBencode/ToBencode traits.</p>

<p><a href="https://gist.github.com/Kimundi/8782487">Lazily initialized statics v0.2</a>.
This makes safe use of statics for types which require runtime initialization
almost trivial. It utilizes the recent overloadable deref to do optional
initialization before returning the reference to the wrapped type. It&rsquo;s an
example that the right amount of abstractions, but syntactic (macros) and
semantic (operator overloading) can reduce boilerplate for a more pleasant
experience.</p>

<p><a href="https://github.com/phildawes/racer">Racer</a> &ndash; code completion for Rust. This
project is in its early stages, but can already do a fair bit of useful
completion. It is not using the parser (libsyntax) or compiler (librustc), so
it will likely always be inaccurate in some respect. Nevertheless, this may
prove to be an incredibly useful tool.</p>

<p><a href="https://github.com/BurntSushi/quickcheck">QuickCheck for Rust</a>. This has some
seriously great docs. QuickCheck, originally from Haskell, is a way of doing
property-based testing. You describe certain properties your code should have
and it generates random inputs, trying to find inputs that violate those
properties. This is a modern, featureful port of QuickCheck and hopefully gets
even more useful as time goes on.</p>

<p>The <a href="https://github.com/uutils/coreutils">coreutils port</a> is still alive and
making progress. 32 out of 119 programs are implemented. This is a great
project to contribute to if you want a relatively self-contained,
goal-oriented task. It&rsquo;s great practice both for learning Unix* (some of these
utilities are quirky or not-frequently-used) and Rust.</p>

<p>* Well, specifically GNU, which as we all know, <a href="https://en.wikipedia.org/wiki/GNU">ain&rsquo;t
Unix</a>.</p>

<h1>Other Announcements</h1>

<ul>
<li><a href="http://www.fastcolabs.com/3027664/under-the-hood-of-mozillas-new-multi-core-browser-and-the-open-source-language-that-powers-i">Under The Hood Of Mozilla&rsquo;s New Multi-Core Browser And The Open Source
Language That Powers
It</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/20ct5c/march_meetup_live_stream_link_oss_parallel_layout/">Bay Area Rust, March 2014
Meetup</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/20aj03/writing_an_os_in_rust_in_tiny_steps_steps_15/">Writing an OS in Rust in tiny
steps</a></li>
<li><a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/8878">&ldquo;Virtual fn&rdquo; is a bad
idea</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
