<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Rust 'n Stuffs]]></title>
  <link href="http://cmr.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2014-04-06T09:46:23-04:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/04/05/this-week-in-rust/"/>
    <updated>2014-04-05T05:06:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/04/05/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>0.10 <a href="https://mail.mozilla.org/pipermail/rust-dev/2014-April/009387.html">was released</a> this week, and with it comes a redesign of the
websites and official nightlies.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>62 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The <code>map</code> and <code>flat_map</code> methods <a href="https://github.com/mozilla/rust/pull/13203">have been
removed</a> from <code>Vec&lt;T&gt;</code>, the are
superseded by their iterator equivalents (of the same name).</li>
<li><code>FromIterator::from_iterator</code> <a href="https://github.com/mozilla/rust/pull/13220">has been
renamed</a> to <code>from_iter</code>.</li>
<li><code>std::vec::{append, append_one}</code> <a href="https://github.com/mozilla/rust/pull/13221">have been turned into
methods</a>.</li>
<li>struct fields <a href="https://github.com/mozilla/rust/pull/13184">are now private by
default</a>. Similarly, fields of
tuple structs <a href="https://github.com/mozilla/rust/pull/13237">are also private by
default</a>.</li>
<li><code>std::num</code> <a href="https://github.com/mozilla/rust/pull/13225">has seen some
cleanup</a>. The <code>cmath</code> module has
been removed from the public API and the various wrapper functions on float
types have been removed.</li>
<li><code>Rng::shuffle_mut</code> <a href="https://github.com/mozilla/rust/pull/13177">has been
renamed</a> to <code>shuffle</code>.</li>
<li>Vectors, arrays, and slices <a href="https://github.com/mozilla/rust/pull/13257">require <code>uint</code> indices
now</a>. Previously they accepted
any integer type.</li>
<li>Static string constants <a href="https://github.com/mozilla/rust/pull/13291">no longer include a null
terminator</a>. This was
accidentally leftover from when all strings were implicitly
null-terminated. This may break code that incorrectly assumed strings were
null-terminated.</li>
<li>The <code>concat_idents</code> macro <a href="https://github.com/mozilla/rust/pull/13295">is now feature
gated</a>.</li>
<li><code>RefCell::get</code> and <code>RefCell::set</code> <a href="https://github.com/mozilla/rust/pull/13301">have been
removed</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>rustc <a href="https://github.com/mozilla/rust/pull/13284">now gives file paths</a>
when reporting duplicate crates found.</li>
<li><code>std::cmp</code> <a href="https://github.com/mozilla/rust/pull/12956">has some nice new
documentation</a>.</li>
<li>The manual <a href="https://github.com/mozilla/rust/pull/13207">now has</a> an updated
list of what attributes are valid and what they do.</li>
<li>Built-in syntax extensions <a href="https://github.com/mozilla/rust/pull/13255">are now
documented</a>.</li>
<li><code>AtomicInt</code> and <code>AtomicUint</code> <a href="https://github.com/mozilla/rust/pull/12964">now have atomic bitwise
operations</a>.</li>
<li>The <code>Show</code> implementation for <code>Cell</code> <a href="https://github.com/mozilla/rust/pull/13243">has been
fixed</a> to actually print the
contents of the Cell.</li>
<li>Macros in statement and expression position <a href="https://github.com/mozilla/rust/pull/13234">can now be delimited by square
brackets</a>.</li>
<li>The <code>k-nucleotide</code> benchmark <a href="https://github.com/mozilla/rust/pull/13206">has been fixed to pass the official shootout
tests</a>.</li>
<li>A nasty bug which would cause <code>Arc</code>s to leak <a href="https://github.com/mozilla/rust/pull/13211">has been
fixed</a>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Benjamin Adamson</li>
<li>Christopher Kendell</li>
<li>Falco Hirschenberger</li>
<li>Gábor Lehel</li>
<li>Ivan Petkov</li>
<li>Scott Jenkins</li>
<li>Timothée Ravier</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-04-01">weekly
meeting</a>
discussed Vec versus <code>~[T]</code>, the intrinsics RFC, and StrBuf.</p>

<h1>RFCs</h1>

<p>Some new RFCs:</p>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/34">Check actual type parameters against their
bounds</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/33">Change return type of str::replace to
MaybeOwned</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/29">Bit fields and matching</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/27">Use different keywords for declaring tagged unions and C-style
enums</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/26">Remove the <code>priv</code> keyword</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/24">Unify and nest structs and
enums</a></li>
</ul>


<h1>Project Updates</h1>

<ul>
<li><a href="https://github.com/LeoTestard/rustlex">rustlex</a>, a syntax extension for
generating regular expression-based lexers.</li>
<li>farcaller <a href="http://www.reddit.com/r/rust/comments/21qogc/im_making_a_note_here_huge_embedded_success/">has shown a
demo</a>
of Rust on an ARM dev board.</li>
<li><a href="http://www.reddit.com/r/rust/comments/21tplw/writing_an_asterisk_module_using_rust/">A sample Asterisk
module</a>,
in Rust</li>
<li><a href="http://alan-andrade.github.io/rust/javascript/2014/03/31/parallel_js_compression.html">Parallel JS
Compression</a>
in Rust.</li>
<li><a href="https://github.com/tedsta/rust-brainfuck/blob/master/main.rs">A Brainfuck
Interpreter</a>
in 43 lines.</li>
<li><a href="https://github.com/Geal/rustfix">rustfix</a>, a simple regex-based upgrading
tool.</li>
<li><a href="http://www.reddit.com/r/rust/comments/229fze/rustiteratorcomprehensions_nest_filter_and_map/">rust-iteratorcomprehensions</a>,
a list comprehension syntax for iterators.</li>
</ul>


<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>In the last week, we landed 18 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton (along with commits from Juneyoung Cho and Hyun June Kim) landed ACID2 support in <a href="https://github.com/mozilla/servo/pull/1988">#1988</a></li>
<li>ms2ger landed a new Rust upgrade, bringing us to late March in <a href="https://github.com/mozilla/servo/pull/2041">#2041</a></li>
<li>Martin Robinson move the active timers for the <code>Window</code> object into a <code>HashMap</code> in <a href="https://github.com/mozilla/servo/pull/2002">#2002</a></li>
<li>Manish Goregaokar made attribute getter/setters case insensitive in <a href="https://github.com/mozilla/servo/pull/2043">#2043</a></li>
<li>Tetsuharu Ohzeki cleaned up <code>Document::create_collection</code> in <a href="https://github.com/mozilla/servo/pull/2031">#2031</a></li>
<li>Peiyong Lin got rid of match statements in layout queries in <a href="https://github.com/mozilla/servo/pull/2022">#2022</a></li>
<li>Bruno de Oliveira Abinader added support for the ASCII whitespace check in <a href="https://github.com/mozilla/servo/pull/2032">#2032</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Martin Robinson</li>
</ul>


<h2>Meetings and Notes</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-31">meeting</a>, we
discussed how to demo ACID2, gave a quick overview of our Q2 agenda, talked
about the tentative Servo workweek date (June 2), and wrapped up where the
rest of the layout features are at now that we have closed down the ACID2
push.</p>

<p>Courtesy of Manish Goregaokar, we now have a
<a href="https://badges.mozilla.org/en-US/badges/badge/Servo-Rust-upgrade">badge</a> for
those brave memebers of the Servo community who participate in the Sisyphean
task of upgrading the version of Rust used in Servo. Thanks, Manish!</p>

<h1>Community</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/21m5jf/rust_vs_go/">Rust vs Go</a></li>
<li><a href="https://www.facebook.com/rustlang">Rust is now on Facebook</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/21ofma/how_similar_is_rust_to_go/">How similar is Rust to
Go?</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/21t8n8/safe_synchronization_primitives_and_their/">Safe Synchronization Primitives and their
implementation</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/21wu1c/simple_typebased_alias_analysis_for_rust/">Simple Type-Based Alias Analysis for
Rust</a></li>
<li>Reminder: <code>~[T]</code> <a href="http://www.reddit.com/r/rust/comments/2213vw/reminder_t_is_not_going_away/">is not going away</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/2212j2/higherkinded_polymorphism/">Higher-kinded
polymorpihsm</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/226ax6/a_more_detailed_tour_of_the_rust_compiler/">A More Detailed Tour of the Rust
Compiler</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/228ou3/another_brain_dump_data_structures/">Another brain dump &ndash; data
structures</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/227o5n/rust_me_im_a_developer_slides_and_commentary_from/">Rust Me, I&rsquo;m a
Developer!</a>,
(slides and commentary from a talk given at Stir Trek 2014)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TBAA Revisited]]></title>
    <link href="http://cmr.github.io/blog/2014/04/04/type-based-alias-analasys-revisted/"/>
    <updated>2014-04-04T02:32:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/04/04/type-based-alias-analasys-revisted</id>
    <content type="html"><![CDATA[<p>My original <a href="http://cmr.github.io/blog/2014/04/01/type-based-alias-analysis-in-rust/">post about alias analysis</a> had some issues, which I clarify
and modify the algorithm to handle.</p>

<!-- more -->


<h2>The Problem</h2>

<p>There are two major issues with the algorithm I described. The first is that
LLVM&rsquo;s TBAA is not flow-sensitive. This means that given two non-aliasing
pointers, it assumes that they <em>never</em>, ever impose or imposed a memory
dependence on each other. On the other hand, Rust&rsquo;s borrowing rules <em>are</em> flow
sensitive. In practice, this means that loads and stores with non-aliasing
TBAA tags can be freely reordered with respect to each other. I could not
convince LLVM to misoptimize some simple examples of TBAA, but it supposedly
does some extra analysis to make sure TBAA-annotated load/stores don&rsquo;t actually
alias so that incorrect C programs don&rsquo;t misoptimize. This was pointed out <a href="http://www.reddit.com/r/rust/comments/21wu1c/simple_typebased_alias_analysis_for_rust/cghh0ga">by
a kind soul on reddit</a>.</p>

<p>Another problem is that the algorithm ignores types which have an unsafe
interior. The <code>Unsafe&lt;T&gt;</code> type can be used to get a mutable reference out of
an immutable one. The <code>RefCell</code> type wraps this to provide the same semantics
that the borrow checker usually provides, but it <em>does</em> return a <code>&amp;mut</code> from a
<code>&amp;</code> that can then modify the contents of the previous <code>&amp;</code>. This is fine, but
violates the TBAA rules I laid out earlier. A previous revision of them
handled this, but got lost during one of the redesigns.</p>

<h2>New Rules</h2>

<p>Given this, we need only change the rules slightly:</p>

<pre><code>!N   = metadata !{ metadata !"&amp;T", metadata !REFERENCE }
!N+1 = metadata !{ metadata !"&amp;mut T", metadata !N }
</code></pre>

<p>That is, <code>&amp;mut T</code> and <code>&amp;T</code> may alias. In practice, I think us putting
<code>noalias</code> on <code>&amp;mut T</code> function arguments will recover most of the aliasing
information. A custom AliasAnalysis pass will be needed for precise aliasing
information, but as cwzwarich pointed out, it will be difficult to retain the
original type-system information across IR transformations. A quest for
another day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Type-Based Alias Analysis for Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/04/01/type-based-alias-analysis-in-rust/"/>
    <updated>2014-04-01T05:48:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/04/01/type-based-alias-analysis-in-rust</id>
    <content type="html"><![CDATA[<p>This post examines type-based alias analysis and how a simple one can be
implemented for <a href="http://www.rust-lang.org/">Rust</a>.</p>

<!-- more -->


<h2>Background</h2>

<p><a href="https://en.wikipedia.org/wiki/Alias_analysis">Alias analysis</a>, in the context of LLVM, is an analysis which determines
whether two pointers can point to the same data, or &ldquo;alias&rdquo;. <a href="http://llvm.org/docs/AliasAnalysis.html">More
specifically</a>, two pointers <code>a</code> and <code>b</code> alias if uses of a pointer
&ldquo;based&rdquo; on <code>a</code> can ever have a dependence on use of a pointer based on <code>b</code>. In
practice, this means that any valid use of the pointers cannot influence the
contents of the other. The LLVM Language Reference has a <a href="http://llvm.org/docs/LangRef.html#pointeraliasing">more precise
definition of aliasing</a>.</p>

<p>Type-based alias analysis (TBAA) is a specific kind of analysis which uses type
information from the frontend to determine whether two pointers can alias. It
is a very coarse analysis, but is very easy and fast to do (linear time with
respect to the number of types, constant time with respect to the size of the
code). <a href="http://llvm.org/docs/LangRef.html#tbaa-metadata">LLVM&rsquo;s TBAA</a> metadata describe a tree of types. Loads, stores,
and calls can then be annotated with which type they use:</p>

<pre><code>store %struct.Foo { ... }, %struct.Foo* %42, !tbaa !0
%val = load %struct.Foo* %42, !tbaa !0
call void @foo(i32* %p), !tbaa !1
</code></pre>

<p>The metadata node referenced has the form:</p>

<pre><code>!0 = metadata !{ metadata !"root node" }
!1 = metadata !{ metadata !"a type", metadata !0 }
!2 = metadata !{ metadata !"another type", metadata !0, i64 1}
!3 = metadata !{ metadata !"root node two" }
!4 = metadata !{ metadata !"yet another type", metadata !3 }
</code></pre>

<p>The first field is the name of the type, the second field is the parent node
in the tree, and the third field is 1 if the pointer &ldquo;pointsToConstantMemory&rdquo;.
A pointer to a type may alias with a pointer to any type which is either an
ancestor or descendent of it in the TBAA tree, or if the types exist in
different TBAA trees. In the above example, pointers of type !1 and !2 can
never alias, whereas pointers of type !1 and !4 may alias, because they exist
in different trees.</p>

<h2>Rust&rsquo;s Aliasing Rules</h2>

<p>Rust&rsquo;s <a href="http://static.rust-lang.org/doc/master/rust.html#type-system">type
system</a> has some
guarantees about pointer aliasing.</p>

<p>The simplest rule is that raw pointers (<code>*T</code> and <code>*mut T</code>) may alias with
anything and everything. <code>*T</code> and <code>*mut T</code> are not segregated, to avoid
punishing misusers of raw pointers with very hard to debug bugs. <code>*T</code> and <code>*U</code>
(raw pointers to unrelated types) may alias freely.</p>

<p>More complexly, <code>&amp;mut T</code>, and <code>&amp;T</code> cannot alias with each other, nor with <code>&amp;U</code>
etc. This is not strictly true, according to <a href="http://llvm.org/docs/LangRef.html#pointeraliasing">LLVM&rsquo;s definition</a> of
&ldquo;alias&rdquo;. However, a <code>&amp;mut T</code> and a <code>&amp;T</code>, if aliasing, can never impose a
memory dependence on each other. The borrow checker will guarantee this. If a
<code>&amp;mut T</code> is live, there cannot be a <code>&amp;T</code> which aliases with it, and vice
versa. Consider the following program:</p>

<pre><code>fn foo(mut x: int) {
    let y = &amp;mut x;
    let z: &amp;int = &amp;*y;
    *y = 32;
}
</code></pre>

<p>This is rejected with the error &ldquo;cannot assign to <code>*y</code> because it is
borrowed&rdquo;. If we instead put the borrow in its own scope:</p>

<pre><code>fn foo(mut x: int) {
    let y = &amp;mut x;
    { let z: &amp;int = &amp;*y; }
    *y = 32;
}
</code></pre>

<p>Compilation will succeed, but any use of <code>y</code> cannot possibly influence any use
of <code>z</code>.</p>

<p>Owning pointers (<code>~T</code>) are a curious case. They are never used directly, but
rather borrowed as <code>&amp;T</code> or <code>&amp;mut T</code>. I believe they can be safely omitted from
this analysis.</p>

<p>Trait objects and closures are somewhat more complicated. They consist of two
pointers, one of which is pointsToConstantMemory (the function pointer), and
the other which obeys the aliasing rules above. I will omit metadata for those
(though see the &ldquo;Moving Forward&rdquo; section)</p>

<h2>Implementing TBAA</h2>

<p>We must define a tree of types, which indicates their aliasability. The
broadest part of the tree is:</p>

<pre><code>digraph "rust tbaa" {
    "simple rust tbaa" -&gt; "raw pointer";
    "raw pointer" -&gt; "reference";
}
</code></pre>

<p>All raw pointers are simply given the &ldquo;raw pointer&rdquo; type, with no additional
discrimination between types. When a owning pointer or reference is
encountered, we will create new metadata nodes for the referenced type:</p>

<pre><code>!N   = metadata !{ metadata !"&amp;T", metadata !REFERENCE }
!N+1 = metadata !{ metadata !"&amp;mut T", metadata !REFERENCE }
</code></pre>

<p>These metadata nodes are then cached in the crate context:</p>

<pre><code>tbaa_nodes: RefCell&lt;HashMap&lt;ty::t, ValueRef&gt;&gt;
</code></pre>

<p>Creation of the metadata nodes is uninteresting. Once they exist, however,
they can be attached to the results from a load/store. For maximum utility,
every possible load/store should be annotated, since unannotated load/stores
are considered MayAlias.</p>

<h2>Store</h2>

<p>The following functions can be modified for Stores:</p>

<ul>
<li><code>datum::load</code></li>
<li><code>Datum::shallow_copy</code></li>
<li><code>glue::drop_ty_immediate</code></li>
<li><code>foreign::trans_native_call</code></li>
<li><code>foreign::trans_rust_fn_with_foreign_abi</code></li>
<li><code>intrinsic::trans_intrinsic</code></li>
</ul>


<p>The following are somewhat interesting cases, because they handle the
translation of primitives. I believe some meaningful TBAA metadata could be
created for them, but I am not sure of the utility, and will omit them for
now:</p>

<ul>
<li><code>tvec::set_fill</code></li>
<li><code>tvec::alloc_raw</code></li>
<li><code>tvec::trans_slice_vstore</code></li>
<li><code>tvec::trans_lit_str</code></li>
<li><code>tvec::iter_vec_loop</code></li>
<li><code>expr::auto_slice</code></li>
<li><code>expr::trans_def_dps_unadjusted</code></li>
</ul>


<p>These are like above, but somewhat less obvious how to handle:</p>

<ul>
<li><code>CleanupHelperMethods::get_or_create_landing_pad</code></li>
<li><code>asm::trans_inline_asm</code></li>
<li><code>closure::store_environment</code></li>
<li><code>closure::fill_fn_pair</code></li>
</ul>


<p>The Store in <code>callee::trans_call_inner</code> does not need TBAA, the retpointer is
already marked noalias in the function args.</p>

<h2>Load</h2>

<ul>
<li><code>datum::load</code></li>
<li><code>base::load_if_immediate</code></li>
</ul>


<p>These handle primitives:</p>

<ul>
<li><code>tvec::get_fill</code></li>
<li><code>tvec::get_alloc</code></li>
<li><code>tvec::get_base_and_byte_len</code></li>
<li><code>tvec::get_base_and_len</code></li>
<li><code>tvec::iter_vec_loop</code></li>
</ul>


<p>These are less obvious how to handle:</p>

<ul>
<li><code>glue::call_visit_glue</code></li>
<li><code>glue::trans_struct_drop_flag</code></li>
<li><code>glue::make_drop_glue</code></li>
<li><code>adt::nullable_bitdiscr</code></li>
<li><code>adt::load_discr</code></li>
<li><code>_match::store_non_ref_bindings</code></li>
<li><code>_match::compile_submatch_continue</code></li>
<li><code>closure::load_environment</code></li>
<li><code>CleanupHelperMethods::trans_cleanup_to_exit_scope</code></li>
<li><code>callee::trans_call_inner</code></li>
<li><code>meth::trans_trait_callee_from_llval</code></li>
</ul>


<h2>Moving Forward</h2>

<p>Once this basic TBAA is done, tbaa.struct metadata can be emitted for memcpy.
There is also a &ldquo;struct-path tbaa&rdquo; which I do not understand yet, but provides
more precise information. After that, a further custom Rust-specific
AliasAnalysis pass can be created which knows, for example, that two separate
<code>&amp;mut T</code> cannot alias. References to statics, and in particular <code>&amp;'static T</code>
are also of interest because they will always be <code>pointsToConstantMemory</code>.
Further investigation waits for another day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/29/this-week-in-rust/"/>
    <updated>2014-03-29T21:56:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/03/29/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>The 0.10 release will likely be this week. 3 months from 0.9 is April 3.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>63 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The <code>sync</code> crate <a href="https://github.com/mozilla/rust/pull/12900">has seen some significant
cleanup</a>. In particular,
<code>RWArc&lt;T&gt;</code> and <code>MutexArc&lt;T&gt;</code> have been removed. <code>Mutex&lt;T&gt;</code> and <code>RWLock&lt;T&gt;</code>
have been introduced, and can be used as <code>Arc&lt;Mutex&lt;T&gt;&gt;</code> and
<code>Arc&lt;RWLock&lt;T&gt;&gt;</code> to replace <code>RWArc</code> and <code>MutexArc</code>. There are some other
minor changes, see the pull request.</li>
<li>Taking a reference to a static whose type contains an <code>Unsafe&lt;T&gt;</code> somewhere
<a href="https://github.com/mozilla/rust/pull/13083">is now forbidden</a>.</li>
<li><code>Extendable</code> and <code>FromIterator</code> <a href="https://github.com/mozilla/rust/pull/13039">now take their argument
by-value</a>.</li>
<li>The crate map <a href="https://github.com/mozilla/rust/pull/13117">has been
removed</a>, and with it a
significant amount of complexity. As a consequence of its removal,
<code>green::start</code> now takes the event loop it should use as an argument rather
than looking in the crate map. <a href="http://static.rust-lang.org/doc/master/green/index.html#starting-with-libgreen">The documentation has an
example</a></li>
<li>The syntax for bounds on generic paths <a href="https://github.com/mozilla/rust/pull/13079">has
changed</a> from
<code>Foo:Bound&lt;Params&gt;</code> to <code>Foo&lt;Params&gt;:Bound</code>.</li>
<li>The default <code>Send</code> bound on trait objects <a href="https://github.com/mozilla/rust/pull/13050">has been
removed</a>.</li>
<li>The <code>serialize</code> infrastructure <a href="https://github.com/mozilla/rust/pull/13107">now supports error reporting via
<code>Result</code></a>.</li>
<li><code>Pod</code> <a href="https://github.com/mozilla/rust/pull/13160">has been renamed</a> to
<code>Copy</code>.</li>
<li>The attribute syntax <a href="https://github.com/mozilla/rust/pull/13162">has
changed</a>. Rather than saying
<code>#[crate_type = "bin"];</code> (with a significant semicolon), you say
<code>#![crate_type = "bin"]</code> (no semicolon).</li>
<li><code>collections::List</code> <a href="https://github.com/mozilla/rust/pull/13183">has been
removed</a>. Use a vector, or
<code>collections::DList</code> if you really want a linked list. Persistent data
structures will live in a different crate than <code>collections</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>A <code>fill</code> method <a href="https://github.com/mozilla/rust/pull/13049">has been added</a>
to <code>Reader</code>, for reading an exact amount of bytes or erroring.</li>
<li>As
<a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007924.html">discussed</a>
on the mailing list some months ago, <a href="https://github.com/mozilla/rust/pull/12991">synchronous, bounded
channels</a> have been added.</li>
<li><code>Share</code>&rsquo;s documentation <a href="https://github.com/mozilla/rust/pull/13070">has been
expanded</a>.</li>
<li>A straggler from the doc sprint, <a href="https://github.com/mozilla/rust/pull/13135">a few hundred lines of
documentation</a> have been added
to <code>std</code>.</li>
<li>Some handy methods <a href="https://github.com/mozilla/rust/pull/12780">have been
added</a> to <code>Json</code> to make
searching and selecting elements from JSON objects easier.</li>
<li>There&rsquo;s a <a href="https://github.com/mozilla/rust/pull/13108">new warn-by-default
lint</a> for deriving traits on
types which contain raw pointers.</li>
<li>Many confusing lifetime-related ICE&rsquo;s <a href="https://github.com/mozilla/rust/pull/13157">have been
fixed</a>. This is good progress
towards closing <a href="https://github.com/mozilla/rust/issues/5121">the notorious issue
5121</a>.</li>
<li>We can now <a href="https://github.com/mozilla/rust/pull/13143">emit debuginfo for
<code>static</code>s</a>. Yay debuginfo!</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Davis Silverman</li>
<li>Noam Gagliardi Rabinovich</li>
<li>Sean McArthur</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-03-25">meeting this
week</a>
discussed various things: attribute parsing in macros, opt-in built-in traits,
SIMD, allowing square brackets in macro invocation, allowing bounds on type
parameters in structs, private fields by default, the fate of
<code>collections::List</code>, and bounds on trait paths.</p>

<h1>RFCs</h1>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/23">Smaller refcounts</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/22">Deserializing to a stream of tagged
values</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/20">Allow bounds on all type
parameters</a></li>
</ul>


<h1>Project Updates</h1>

<ul>
<li><a href="https://github.com/KokaKiwi/rust-highlight">rust-highlight</a> can be used to
highlight Rust code in LaTeX, HTML, and JSON.</li>
<li><a href="https://github.com/arjantop/rust-tabular">rust-tabular</a>, a library for
handling delimiter-separated values (commas, tabs, or any other character),
as well as fixed columns of fixed width.</li>
<li><a href="https://github.com/BurntSushi/rust-csv">rust-csv</a>, a CSV library which
implements <code>Encoder</code> and <code>Decoder</code> for <code>serialize</code> support.</li>
</ul>


<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>In the last two weeks, we landed 33 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Lars Bergstrom landed a Rust upgrade, bringing us to late February in
<a href="https://github.com/mozilla/servo/pull/1934">#1934</a></li>
<li>ms2ger cleaned up some sketchy use of unsafe native pointers, wrapping them
in a <code>JS&lt;T&gt;</code> in <a href="https://github.com/mozilla/servo/pull/1915">#1915</a></li>
<li>Matt Brubeck named the WorkQueue tasks so that we&rsquo;ll know where failure is
coming from during parallel layout in
<a href="https://github.com/mozilla/servo/pull/1977">#1977</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Matt Brubeck (mbrubeck)</li>
</ul>


<h2>Meetings and Notes</h2>

<p>Patrick Walton authored and combined the final set of changes required to get
Servo <a href="https://twitter.com/pcwalton/status/449299846873108480">passing ACID2</a>!</p>

<p>Matthew Brubeck has joined the Servo team full-time, coming over from the
Firefox Metro project.</p>

<p>In the meeting <a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-17">two weeks
ago</a>, we discussed
the Rust upgrade, z-index support, and ACID2. In the most recent
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-24">meeting</a>, we
provided an update on ACID2 and the status of Servo on Android.</p>

<h1>Other Announcements</h1>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/009223.html">Official Installers and
Nightlies</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/24/this-week-in-rust/"/>
    <updated>2014-03-24T23:33:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/03/24/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This weeks flips the switch from libgreen-by-default to libnative-by-default.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>91 pull requests were merged this week, topping the <a href="http://cmr.github.io/blog/2014/02/23/this-week-in-rust/">previous
record</a> of 89.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Logging <a href="https://github.com/mozilla/rust/pull/12791">has been extracted to its own
crate</a>. Using the logging macros
(<code>debug!</code> etc) now requires a <code>#[phase(syntax, link)] extern crate log;</code>.</li>
<li>The <code>AtomicFlag</code> type <a href="https://github.com/mozilla/rust/pull/12951">has been
removed</a>.</li>
<li><code>std::vec</code> <a href="https://github.com/mozilla/rust/pull/12772">has been renamed</a> to
<code>std::slice</code>, and the old <code>std::vec_ng</code> <a href="https://github.com/mozilla/rust/pull/13028">moved into its
place</a>.</li>
<li>A <code>Share</code> built-in trait <a href="https://github.com/mozilla/rust/pull/12686">has been
added</a>. It also adds an
<code>Unsafe&lt;T&gt;</code> type, which is now the <em>only</em> &ldquo;safe&rdquo; way of achieving internal
mutability (what the <code>Cell</code> types etc do). This <code>Share</code> trait means that the
type is thread-safe. See the pull request for more details. In particular,
taking the address of a static who contains an <code>Unsafe</code> member is not
allowed.</li>
<li><code>std::cast::transmute_immut_unsafe</code> <a href="https://github.com/mozilla/rust/pull/13015">has been
removed</a> because it is
expressible by safe code.</li>
<li><code>libnative</code> <a href="https://github.com/mozilla/rust/pull/12833">is now the default
runtime</a>. In the process, the
<code>#[no_uv]</code> attribute was renamed to <code>#[no_start]</code>.</li>
<li>Atomics <a href="https://github.com/mozilla/rust/pull/13036">no longer require mutable references to
change</a>, due to the work on
<code>Share</code>, they can safely use interior mutability. Additionally, the generic
atomics have been hidden and <code>AtomicU64</code> has been removed, because not all
targets support it.</li>
<li>The <code>push_bytes</code> and <code>read_bytes</code> methods on <code>Reader</code> and <code>Writer</code> <a href="https://github.com/mozilla/rust/pull/12907">have
been renamed</a> for clarity.</li>
<li><code>RefCell::with</code> and <code>RefCell::with_mut</code> <a href="https://github.com/mozilla/rust/pull/13052">have been
removed</a>, because the Deref
changes make them unnecessary.</li>
<li>The <code>get</code> methods on <code>Ref</code> and <code>RefMut</code> (helpers returned by <code>RefCell</code>)
<a href="https://github.com/mozilla/rust/pull/13053">have been removed</a>, because
the Deref changes make them unnecessary.</li>
<li>The <code>Freeze</code> trait <a href="https://github.com/mozilla/rust/pull/13076">has been
removed</a></li>
<li><code>std::managed</code> <a href="https://github.com/mozilla/rust/pull/13089">has been
removed</a> from the public API.</li>
<li><code>HashMap</code> <a href="https://github.com/mozilla/rust/pull/13088">now correctly uses
<code>TotalEq</code></a>.</li>
<li>The <code>to_owned_vec</code> method on <code>Iterator</code> <a href="https://github.com/mozilla/rust/pull/13090">has been
removed</a>.</li>
<li>The <code>equals</code> method <a href="https://github.com/mozilla/rust/pull/13102">has been
removed</a> from <code>TotalEq</code>, due to
the recent changes in <code>TotalEq</code>&rsquo;s semantics.</li>
<li>Trait implementations may <a href="https://github.com/mozilla/rust/pull/13006">no
longer</a> implement a method
twice.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Some bugs with cross-crate autoderef <a href="https://github.com/mozilla/rust/pull/13087">have been
fixed</a>.</li>
<li>Some Windows issues with non-English locales <a href="https://github.com/mozilla/rust/pull/13078">have been
fixed</a>.</li>
<li>Removing two words from a structure in libsyntax <a href="https://github.com/mozilla/rust/pull/13016">shaved 100MB off the
librustc compile</a>.</li>
<li>Some well-placed indirection in librustc <a href="https://github.com/mozilla/rust/pull/13013">shaved 200MB off the librustc
compile</a>.</li>
<li>Discarding some data after it&rsquo;s no longer useful <a href="https://github.com/mozilla/rust/pull/12770">shaved another 100MB off
the librustc compile</a>.</li>
<li>The new attribute syntax <a href="https://github.com/mozilla/rust/pull/13037">has been
implemented</a>, though the old has
not yet been replaced.</li>
<li><code>Vec</code> is <a href="https://github.com/mozilla/rust/pull/13020">now in the prelude</a>,
as well as the lint for uses of <code>~[T]</code> being made allow by default.</li>
<li>Some false positives for crate searching <a href="https://github.com/mozilla/rust/pull/13017">have been
fixed</a>.</li>
<li>A few bugs with struct ABI on x86 <a href="https://github.com/mozilla/rust/pull/12762">have been
fixed</a>.</li>
<li>Mutable slices in <code>static mut</code> <a href="https://github.com/mozilla/rust/pull/12742">are now
allowed</a>.</li>
<li>Some <code>@</code> has been removed from rustc, <a href="https://github.com/mozilla/rust/pull/12735">yielding an 11k line
patch</a>.</li>
<li><code>bigint</code> <a href="https://github.com/mozilla/rust/pull/12924">has seen some
optimization</a>, though not major.</li>
</ul>


<p>The <a href="http://www.meetup.com/Rust-Bay-Area/events/168366122/">doc sprint</a>
happened last week. A bunch of pull requests for docs for this landed:</p>

<ul>
<li><code>std::ops</code> (from the rollup)</li>
<li><a href="https://github.com/mozilla/rust/pull/12940"><code>time::Tm</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12942"><code>getopts</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12944">Endian conversion in
<code>std::mem</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12954"><code>std::sync::atomics</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12955"><code>std::vec_ng</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12982"><code>std::option</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12948"><code>term</code></a></li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Eunchong Yu</li>
<li>Jonathan S</li>
<li>Jorge Aparicio</li>
<li>Ms2ger</li>
<li>Olle Jonsson</li>
<li>Ryan Scheel (Havvy)</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-03-18">weekly
meeting</a>
discussed using GitHub for RFCs, the docsprint, and one of the RFCs.</p>

<h1>RFCs</h1>

<p>Some new RFCs:</p>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/12">Tweaked Variance Inference</a></li>
<li>Another struct inheritance RFC, <a href="https://github.com/rust-lang/rfcs/pull/11">extending
enums</a></li>
<li>Another one, <a href="https://github.com/rust-lang/rfcs/pull/10"><code>abstract struct</code> and <code>abstract
enum</code></a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/18">Unsurprising module imports</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/17"><code>Iterable</code> trait family</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/16">Attributes on match arms and
statements</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/15">SIMD Support</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/19">Opt-in builtin traits</a></li>
</ul>


<h1>Project Updates</h1>

<p><a href="https://github.com/dobkeratops/rustfind">rustfind</a>, doomlord&rsquo;s code browser
for Rust, <a href="http://www.reddit.com/r/rust/comments/20q3uz/rustfind_code_browser/">has been updated</a>.
This is a very nice librustc-integrated tool that supports jump-to-definition.</p>

<p>Relatedly, I&rsquo;m reminded of <a href="https://github.com/dobkeratops/unfold">unfold</a>,
doomlord&rsquo;s tool for displaying &ldquo;brace context&rdquo; of code. It includes an &ldquo;rg&rdquo;
script, which is a simple grep for item definitions.</p>

<p>In leiu of a &ldquo;This Week in Servo&rdquo;, Servo <a href="http://imgur.com/a/O667X">has been making
progress</a> on <a href="http://acid2.acidtests.org/">Acid2</a>.</p>

<h1>Other Announcements</h1>

<ul>
<li><a href="http://nethack4.org/blog/memory.html">Memory Management in C Programs</a> &mdash;
this is a very well written article from the nethack team. All the concepts
discussed within apply to Rust.</li>
<li><a href="http://blog.babelmonkeys.de/2014/03/18/dst.html">Dynamically Sized Types in
Rust</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/009087.html">Announcing the new Rust package manager,
Cargo</a>.
It&rsquo;s on <a href="https://github.com/carlhuda/cargo">github</a>.</li>
<li><a href="http://dwarfstd.org/ShowIssue.php?issue=140129.1">Rust is in the next DWARF
standard!</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/20nnkk/rust_and_emscripten_a_small_success/">A success story of Rust and
emscripten</a></li>
<li><a href="http://www.meetup.com/Rust-London-User-Group/">A Rust meetup group in
London</a></li>
<li><a href="http://featherweightmusings.blogspot.com.br/2014/03/subtyping-and-coercion-in-rust.html">Subtyping and coercion in
Rust</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
