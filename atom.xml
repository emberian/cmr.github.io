<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rust 'n Stuffs]]></title>
  <link href="http://cmr.github.io/atom.xml" rel="self"/>
  <link href="http://cmr.github.io/"/>
  <updated>2014-04-06T09:46:23-04:00</updated>
  <id>http://cmr.github.io/</id>
  <author>
    <name><![CDATA[Corey Richardson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/04/05/this-week-in-rust/"/>
    <updated>2014-04-05T05:06:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/04/05/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>0.10 <a href="https://mail.mozilla.org/pipermail/rust-dev/2014-April/009387.html">was released</a> this week, and with it comes a redesign of the
websites and official nightlies.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>62 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The <code>map</code> and <code>flat_map</code> methods <a href="https://github.com/mozilla/rust/pull/13203">have been
removed</a> from <code>Vec&lt;T&gt;</code>, the are
superseded by their iterator equivalents (of the same name).</li>
<li><code>FromIterator::from_iterator</code> <a href="https://github.com/mozilla/rust/pull/13220">has been
renamed</a> to <code>from_iter</code>.</li>
<li><code>std::vec::{append, append_one}</code> <a href="https://github.com/mozilla/rust/pull/13221">have been turned into
methods</a>.</li>
<li>struct fields <a href="https://github.com/mozilla/rust/pull/13184">are now private by
default</a>. Similarly, fields of
tuple structs <a href="https://github.com/mozilla/rust/pull/13237">are also private by
default</a>.</li>
<li><code>std::num</code> <a href="https://github.com/mozilla/rust/pull/13225">has seen some
cleanup</a>. The <code>cmath</code> module has
been removed from the public API and the various wrapper functions on float
types have been removed.</li>
<li><code>Rng::shuffle_mut</code> <a href="https://github.com/mozilla/rust/pull/13177">has been
renamed</a> to <code>shuffle</code>.</li>
<li>Vectors, arrays, and slices <a href="https://github.com/mozilla/rust/pull/13257">require <code>uint</code> indices
now</a>. Previously they accepted
any integer type.</li>
<li>Static string constants <a href="https://github.com/mozilla/rust/pull/13291">no longer include a null
terminator</a>. This was
accidentally leftover from when all strings were implicitly
null-terminated. This may break code that incorrectly assumed strings were
null-terminated.</li>
<li>The <code>concat_idents</code> macro <a href="https://github.com/mozilla/rust/pull/13295">is now feature
gated</a>.</li>
<li><code>RefCell::get</code> and <code>RefCell::set</code> <a href="https://github.com/mozilla/rust/pull/13301">have been
removed</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>rustc <a href="https://github.com/mozilla/rust/pull/13284">now gives file paths</a>
when reporting duplicate crates found.</li>
<li><code>std::cmp</code> <a href="https://github.com/mozilla/rust/pull/12956">has some nice new
documentation</a>.</li>
<li>The manual <a href="https://github.com/mozilla/rust/pull/13207">now has</a> an updated
list of what attributes are valid and what they do.</li>
<li>Built-in syntax extensions <a href="https://github.com/mozilla/rust/pull/13255">are now
documented</a>.</li>
<li><code>AtomicInt</code> and <code>AtomicUint</code> <a href="https://github.com/mozilla/rust/pull/12964">now have atomic bitwise
operations</a>.</li>
<li>The <code>Show</code> implementation for <code>Cell</code> <a href="https://github.com/mozilla/rust/pull/13243">has been
fixed</a> to actually print the
contents of the Cell.</li>
<li>Macros in statement and expression position <a href="https://github.com/mozilla/rust/pull/13234">can now be delimited by square
brackets</a>.</li>
<li>The <code>k-nucleotide</code> benchmark <a href="https://github.com/mozilla/rust/pull/13206">has been fixed to pass the official shootout
tests</a>.</li>
<li>A nasty bug which would cause <code>Arc</code>s to leak <a href="https://github.com/mozilla/rust/pull/13211">has been
fixed</a>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Benjamin Adamson</li>
<li>Christopher Kendell</li>
<li>Falco Hirschenberger</li>
<li>Gábor Lehel</li>
<li>Ivan Petkov</li>
<li>Scott Jenkins</li>
<li>Timothée Ravier</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-04-01">weekly
meeting</a>
discussed Vec versus <code>~[T]</code>, the intrinsics RFC, and StrBuf.</p>

<h1>RFCs</h1>

<p>Some new RFCs:</p>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/34">Check actual type parameters against their
bounds</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/33">Change return type of str::replace to
MaybeOwned</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/29">Bit fields and matching</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/27">Use different keywords for declaring tagged unions and C-style
enums</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/26">Remove the <code>priv</code> keyword</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/24">Unify and nest structs and
enums</a></li>
</ul>


<h1>Project Updates</h1>

<ul>
<li><a href="https://github.com/LeoTestard/rustlex">rustlex</a>, a syntax extension for
generating regular expression-based lexers.</li>
<li>farcaller <a href="http://www.reddit.com/r/rust/comments/21qogc/im_making_a_note_here_huge_embedded_success/">has shown a
demo</a>
of Rust on an ARM dev board.</li>
<li><a href="http://www.reddit.com/r/rust/comments/21tplw/writing_an_asterisk_module_using_rust/">A sample Asterisk
module</a>,
in Rust</li>
<li><a href="http://alan-andrade.github.io/rust/javascript/2014/03/31/parallel_js_compression.html">Parallel JS
Compression</a>
in Rust.</li>
<li><a href="https://github.com/tedsta/rust-brainfuck/blob/master/main.rs">A Brainfuck
Interpreter</a>
in 43 lines.</li>
<li><a href="https://github.com/Geal/rustfix">rustfix</a>, a simple regex-based upgrading
tool.</li>
<li><a href="http://www.reddit.com/r/rust/comments/229fze/rustiteratorcomprehensions_nest_filter_and_map/">rust-iteratorcomprehensions</a>,
a list comprehension syntax for iterators.</li>
</ul>


<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>In the last week, we landed 18 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton (along with commits from Juneyoung Cho and Hyun June Kim) landed ACID2 support in <a href="https://github.com/mozilla/servo/pull/1988">#1988</a></li>
<li>ms2ger landed a new Rust upgrade, bringing us to late March in <a href="https://github.com/mozilla/servo/pull/2041">#2041</a></li>
<li>Martin Robinson move the active timers for the <code>Window</code> object into a <code>HashMap</code> in <a href="https://github.com/mozilla/servo/pull/2002">#2002</a></li>
<li>Manish Goregaokar made attribute getter/setters case insensitive in <a href="https://github.com/mozilla/servo/pull/2043">#2043</a></li>
<li>Tetsuharu Ohzeki cleaned up <code>Document::create_collection</code> in <a href="https://github.com/mozilla/servo/pull/2031">#2031</a></li>
<li>Peiyong Lin got rid of match statements in layout queries in <a href="https://github.com/mozilla/servo/pull/2022">#2022</a></li>
<li>Bruno de Oliveira Abinader added support for the ASCII whitespace check in <a href="https://github.com/mozilla/servo/pull/2032">#2032</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Martin Robinson</li>
</ul>


<h2>Meetings and Notes</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-31">meeting</a>, we
discussed how to demo ACID2, gave a quick overview of our Q2 agenda, talked
about the tentative Servo workweek date (June 2), and wrapped up where the
rest of the layout features are at now that we have closed down the ACID2
push.</p>

<p>Courtesy of Manish Goregaokar, we now have a
<a href="https://badges.mozilla.org/en-US/badges/badge/Servo-Rust-upgrade">badge</a> for
those brave memebers of the Servo community who participate in the Sisyphean
task of upgrading the version of Rust used in Servo. Thanks, Manish!</p>

<h1>Community</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/21m5jf/rust_vs_go/">Rust vs Go</a></li>
<li><a href="https://www.facebook.com/rustlang">Rust is now on Facebook</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/21ofma/how_similar_is_rust_to_go/">How similar is Rust to
Go?</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/21t8n8/safe_synchronization_primitives_and_their/">Safe Synchronization Primitives and their
implementation</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/21wu1c/simple_typebased_alias_analysis_for_rust/">Simple Type-Based Alias Analysis for
Rust</a></li>
<li>Reminder: <code>~[T]</code> <a href="http://www.reddit.com/r/rust/comments/2213vw/reminder_t_is_not_going_away/">is not going away</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/2212j2/higherkinded_polymorphism/">Higher-kinded
polymorpihsm</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/226ax6/a_more_detailed_tour_of_the_rust_compiler/">A More Detailed Tour of the Rust
Compiler</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/228ou3/another_brain_dump_data_structures/">Another brain dump &ndash; data
structures</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/227o5n/rust_me_im_a_developer_slides_and_commentary_from/">Rust Me, I&rsquo;m a
Developer!</a>,
(slides and commentary from a talk given at Stir Trek 2014)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TBAA Revisited]]></title>
    <link href="http://cmr.github.io/blog/2014/04/04/type-based-alias-analasys-revisted/"/>
    <updated>2014-04-04T02:32:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/04/04/type-based-alias-analasys-revisted</id>
    <content type="html"><![CDATA[<p>My original <a href="http://cmr.github.io/blog/2014/04/01/type-based-alias-analysis-in-rust/">post about alias analysis</a> had some issues, which I clarify
and modify the algorithm to handle.</p>

<!-- more -->


<h2>The Problem</h2>

<p>There are two major issues with the algorithm I described. The first is that
LLVM&rsquo;s TBAA is not flow-sensitive. This means that given two non-aliasing
pointers, it assumes that they <em>never</em>, ever impose or imposed a memory
dependence on each other. On the other hand, Rust&rsquo;s borrowing rules <em>are</em> flow
sensitive. In practice, this means that loads and stores with non-aliasing
TBAA tags can be freely reordered with respect to each other. I could not
convince LLVM to misoptimize some simple examples of TBAA, but it supposedly
does some extra analysis to make sure TBAA-annotated load/stores don&rsquo;t actually
alias so that incorrect C programs don&rsquo;t misoptimize. This was pointed out <a href="http://www.reddit.com/r/rust/comments/21wu1c/simple_typebased_alias_analysis_for_rust/cghh0ga">by
a kind soul on reddit</a>.</p>

<p>Another problem is that the algorithm ignores types which have an unsafe
interior. The <code>Unsafe&lt;T&gt;</code> type can be used to get a mutable reference out of
an immutable one. The <code>RefCell</code> type wraps this to provide the same semantics
that the borrow checker usually provides, but it <em>does</em> return a <code>&amp;mut</code> from a
<code>&amp;</code> that can then modify the contents of the previous <code>&amp;</code>. This is fine, but
violates the TBAA rules I laid out earlier. A previous revision of them
handled this, but got lost during one of the redesigns.</p>

<h2>New Rules</h2>

<p>Given this, we need only change the rules slightly:</p>

<pre><code>!N   = metadata !{ metadata !"&amp;T", metadata !REFERENCE }
!N+1 = metadata !{ metadata !"&amp;mut T", metadata !N }
</code></pre>

<p>That is, <code>&amp;mut T</code> and <code>&amp;T</code> may alias. In practice, I think us putting
<code>noalias</code> on <code>&amp;mut T</code> function arguments will recover most of the aliasing
information. A custom AliasAnalysis pass will be needed for precise aliasing
information, but as cwzwarich pointed out, it will be difficult to retain the
original type-system information across IR transformations. A quest for
another day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Type-Based Alias Analysis for Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/04/01/type-based-alias-analysis-in-rust/"/>
    <updated>2014-04-01T05:48:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/04/01/type-based-alias-analysis-in-rust</id>
    <content type="html"><![CDATA[<p>This post examines type-based alias analysis and how a simple one can be
implemented for <a href="http://www.rust-lang.org/">Rust</a>.</p>

<!-- more -->


<h2>Background</h2>

<p><a href="https://en.wikipedia.org/wiki/Alias_analysis">Alias analysis</a>, in the context of LLVM, is an analysis which determines
whether two pointers can point to the same data, or &ldquo;alias&rdquo;. <a href="http://llvm.org/docs/AliasAnalysis.html">More
specifically</a>, two pointers <code>a</code> and <code>b</code> alias if uses of a pointer
&ldquo;based&rdquo; on <code>a</code> can ever have a dependence on use of a pointer based on <code>b</code>. In
practice, this means that any valid use of the pointers cannot influence the
contents of the other. The LLVM Language Reference has a <a href="http://llvm.org/docs/LangRef.html#pointeraliasing">more precise
definition of aliasing</a>.</p>

<p>Type-based alias analysis (TBAA) is a specific kind of analysis which uses type
information from the frontend to determine whether two pointers can alias. It
is a very coarse analysis, but is very easy and fast to do (linear time with
respect to the number of types, constant time with respect to the size of the
code). <a href="http://llvm.org/docs/LangRef.html#tbaa-metadata">LLVM&rsquo;s TBAA</a> metadata describe a tree of types. Loads, stores,
and calls can then be annotated with which type they use:</p>

<pre><code>store %struct.Foo { ... }, %struct.Foo* %42, !tbaa !0
%val = load %struct.Foo* %42, !tbaa !0
call void @foo(i32* %p), !tbaa !1
</code></pre>

<p>The metadata node referenced has the form:</p>

<pre><code>!0 = metadata !{ metadata !"root node" }
!1 = metadata !{ metadata !"a type", metadata !0 }
!2 = metadata !{ metadata !"another type", metadata !0, i64 1}
!3 = metadata !{ metadata !"root node two" }
!4 = metadata !{ metadata !"yet another type", metadata !3 }
</code></pre>

<p>The first field is the name of the type, the second field is the parent node
in the tree, and the third field is 1 if the pointer &ldquo;pointsToConstantMemory&rdquo;.
A pointer to a type may alias with a pointer to any type which is either an
ancestor or descendent of it in the TBAA tree, or if the types exist in
different TBAA trees. In the above example, pointers of type !1 and !2 can
never alias, whereas pointers of type !1 and !4 may alias, because they exist
in different trees.</p>

<h2>Rust&rsquo;s Aliasing Rules</h2>

<p>Rust&rsquo;s <a href="http://static.rust-lang.org/doc/master/rust.html#type-system">type
system</a> has some
guarantees about pointer aliasing.</p>

<p>The simplest rule is that raw pointers (<code>*T</code> and <code>*mut T</code>) may alias with
anything and everything. <code>*T</code> and <code>*mut T</code> are not segregated, to avoid
punishing misusers of raw pointers with very hard to debug bugs. <code>*T</code> and <code>*U</code>
(raw pointers to unrelated types) may alias freely.</p>

<p>More complexly, <code>&amp;mut T</code>, and <code>&amp;T</code> cannot alias with each other, nor with <code>&amp;U</code>
etc. This is not strictly true, according to <a href="http://llvm.org/docs/LangRef.html#pointeraliasing">LLVM&rsquo;s definition</a> of
&ldquo;alias&rdquo;. However, a <code>&amp;mut T</code> and a <code>&amp;T</code>, if aliasing, can never impose a
memory dependence on each other. The borrow checker will guarantee this. If a
<code>&amp;mut T</code> is live, there cannot be a <code>&amp;T</code> which aliases with it, and vice
versa. Consider the following program:</p>

<pre><code>fn foo(mut x: int) {
    let y = &amp;mut x;
    let z: &amp;int = &amp;*y;
    *y = 32;
}
</code></pre>

<p>This is rejected with the error &ldquo;cannot assign to <code>*y</code> because it is
borrowed&rdquo;. If we instead put the borrow in its own scope:</p>

<pre><code>fn foo(mut x: int) {
    let y = &amp;mut x;
    { let z: &amp;int = &amp;*y; }
    *y = 32;
}
</code></pre>

<p>Compilation will succeed, but any use of <code>y</code> cannot possibly influence any use
of <code>z</code>.</p>

<p>Owning pointers (<code>~T</code>) are a curious case. They are never used directly, but
rather borrowed as <code>&amp;T</code> or <code>&amp;mut T</code>. I believe they can be safely omitted from
this analysis.</p>

<p>Trait objects and closures are somewhat more complicated. They consist of two
pointers, one of which is pointsToConstantMemory (the function pointer), and
the other which obeys the aliasing rules above. I will omit metadata for those
(though see the &ldquo;Moving Forward&rdquo; section)</p>

<h2>Implementing TBAA</h2>

<p>We must define a tree of types, which indicates their aliasability. The
broadest part of the tree is:</p>

<pre><code>digraph "rust tbaa" {
    "simple rust tbaa" -&gt; "raw pointer";
    "raw pointer" -&gt; "reference";
}
</code></pre>

<p>All raw pointers are simply given the &ldquo;raw pointer&rdquo; type, with no additional
discrimination between types. When a owning pointer or reference is
encountered, we will create new metadata nodes for the referenced type:</p>

<pre><code>!N   = metadata !{ metadata !"&amp;T", metadata !REFERENCE }
!N+1 = metadata !{ metadata !"&amp;mut T", metadata !REFERENCE }
</code></pre>

<p>These metadata nodes are then cached in the crate context:</p>

<pre><code>tbaa_nodes: RefCell&lt;HashMap&lt;ty::t, ValueRef&gt;&gt;
</code></pre>

<p>Creation of the metadata nodes is uninteresting. Once they exist, however,
they can be attached to the results from a load/store. For maximum utility,
every possible load/store should be annotated, since unannotated load/stores
are considered MayAlias.</p>

<h2>Store</h2>

<p>The following functions can be modified for Stores:</p>

<ul>
<li><code>datum::load</code></li>
<li><code>Datum::shallow_copy</code></li>
<li><code>glue::drop_ty_immediate</code></li>
<li><code>foreign::trans_native_call</code></li>
<li><code>foreign::trans_rust_fn_with_foreign_abi</code></li>
<li><code>intrinsic::trans_intrinsic</code></li>
</ul>


<p>The following are somewhat interesting cases, because they handle the
translation of primitives. I believe some meaningful TBAA metadata could be
created for them, but I am not sure of the utility, and will omit them for
now:</p>

<ul>
<li><code>tvec::set_fill</code></li>
<li><code>tvec::alloc_raw</code></li>
<li><code>tvec::trans_slice_vstore</code></li>
<li><code>tvec::trans_lit_str</code></li>
<li><code>tvec::iter_vec_loop</code></li>
<li><code>expr::auto_slice</code></li>
<li><code>expr::trans_def_dps_unadjusted</code></li>
</ul>


<p>These are like above, but somewhat less obvious how to handle:</p>

<ul>
<li><code>CleanupHelperMethods::get_or_create_landing_pad</code></li>
<li><code>asm::trans_inline_asm</code></li>
<li><code>closure::store_environment</code></li>
<li><code>closure::fill_fn_pair</code></li>
</ul>


<p>The Store in <code>callee::trans_call_inner</code> does not need TBAA, the retpointer is
already marked noalias in the function args.</p>

<h2>Load</h2>

<ul>
<li><code>datum::load</code></li>
<li><code>base::load_if_immediate</code></li>
</ul>


<p>These handle primitives:</p>

<ul>
<li><code>tvec::get_fill</code></li>
<li><code>tvec::get_alloc</code></li>
<li><code>tvec::get_base_and_byte_len</code></li>
<li><code>tvec::get_base_and_len</code></li>
<li><code>tvec::iter_vec_loop</code></li>
</ul>


<p>These are less obvious how to handle:</p>

<ul>
<li><code>glue::call_visit_glue</code></li>
<li><code>glue::trans_struct_drop_flag</code></li>
<li><code>glue::make_drop_glue</code></li>
<li><code>adt::nullable_bitdiscr</code></li>
<li><code>adt::load_discr</code></li>
<li><code>_match::store_non_ref_bindings</code></li>
<li><code>_match::compile_submatch_continue</code></li>
<li><code>closure::load_environment</code></li>
<li><code>CleanupHelperMethods::trans_cleanup_to_exit_scope</code></li>
<li><code>callee::trans_call_inner</code></li>
<li><code>meth::trans_trait_callee_from_llval</code></li>
</ul>


<h2>Moving Forward</h2>

<p>Once this basic TBAA is done, tbaa.struct metadata can be emitted for memcpy.
There is also a &ldquo;struct-path tbaa&rdquo; which I do not understand yet, but provides
more precise information. After that, a further custom Rust-specific
AliasAnalysis pass can be created which knows, for example, that two separate
<code>&amp;mut T</code> cannot alias. References to statics, and in particular <code>&amp;'static T</code>
are also of interest because they will always be <code>pointsToConstantMemory</code>.
Further investigation waits for another day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/29/this-week-in-rust/"/>
    <updated>2014-03-29T21:56:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/03/29/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>The 0.10 release will likely be this week. 3 months from 0.9 is April 3.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>63 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>The <code>sync</code> crate <a href="https://github.com/mozilla/rust/pull/12900">has seen some significant
cleanup</a>. In particular,
<code>RWArc&lt;T&gt;</code> and <code>MutexArc&lt;T&gt;</code> have been removed. <code>Mutex&lt;T&gt;</code> and <code>RWLock&lt;T&gt;</code>
have been introduced, and can be used as <code>Arc&lt;Mutex&lt;T&gt;&gt;</code> and
<code>Arc&lt;RWLock&lt;T&gt;&gt;</code> to replace <code>RWArc</code> and <code>MutexArc</code>. There are some other
minor changes, see the pull request.</li>
<li>Taking a reference to a static whose type contains an <code>Unsafe&lt;T&gt;</code> somewhere
<a href="https://github.com/mozilla/rust/pull/13083">is now forbidden</a>.</li>
<li><code>Extendable</code> and <code>FromIterator</code> <a href="https://github.com/mozilla/rust/pull/13039">now take their argument
by-value</a>.</li>
<li>The crate map <a href="https://github.com/mozilla/rust/pull/13117">has been
removed</a>, and with it a
significant amount of complexity. As a consequence of its removal,
<code>green::start</code> now takes the event loop it should use as an argument rather
than looking in the crate map. <a href="http://static.rust-lang.org/doc/master/green/index.html#starting-with-libgreen">The documentation has an
example</a></li>
<li>The syntax for bounds on generic paths <a href="https://github.com/mozilla/rust/pull/13079">has
changed</a> from
<code>Foo:Bound&lt;Params&gt;</code> to <code>Foo&lt;Params&gt;:Bound</code>.</li>
<li>The default <code>Send</code> bound on trait objects <a href="https://github.com/mozilla/rust/pull/13050">has been
removed</a>.</li>
<li>The <code>serialize</code> infrastructure <a href="https://github.com/mozilla/rust/pull/13107">now supports error reporting via
<code>Result</code></a>.</li>
<li><code>Pod</code> <a href="https://github.com/mozilla/rust/pull/13160">has been renamed</a> to
<code>Copy</code>.</li>
<li>The attribute syntax <a href="https://github.com/mozilla/rust/pull/13162">has
changed</a>. Rather than saying
<code>#[crate_type = "bin"];</code> (with a significant semicolon), you say
<code>#![crate_type = "bin"]</code> (no semicolon).</li>
<li><code>collections::List</code> <a href="https://github.com/mozilla/rust/pull/13183">has been
removed</a>. Use a vector, or
<code>collections::DList</code> if you really want a linked list. Persistent data
structures will live in a different crate than <code>collections</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>A <code>fill</code> method <a href="https://github.com/mozilla/rust/pull/13049">has been added</a>
to <code>Reader</code>, for reading an exact amount of bytes or erroring.</li>
<li>As
<a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007924.html">discussed</a>
on the mailing list some months ago, <a href="https://github.com/mozilla/rust/pull/12991">synchronous, bounded
channels</a> have been added.</li>
<li><code>Share</code>&rsquo;s documentation <a href="https://github.com/mozilla/rust/pull/13070">has been
expanded</a>.</li>
<li>A straggler from the doc sprint, <a href="https://github.com/mozilla/rust/pull/13135">a few hundred lines of
documentation</a> have been added
to <code>std</code>.</li>
<li>Some handy methods <a href="https://github.com/mozilla/rust/pull/12780">have been
added</a> to <code>Json</code> to make
searching and selecting elements from JSON objects easier.</li>
<li>There&rsquo;s a <a href="https://github.com/mozilla/rust/pull/13108">new warn-by-default
lint</a> for deriving traits on
types which contain raw pointers.</li>
<li>Many confusing lifetime-related ICE&rsquo;s <a href="https://github.com/mozilla/rust/pull/13157">have been
fixed</a>. This is good progress
towards closing <a href="https://github.com/mozilla/rust/issues/5121">the notorious issue
5121</a>.</li>
<li>We can now <a href="https://github.com/mozilla/rust/pull/13143">emit debuginfo for
<code>static</code>s</a>. Yay debuginfo!</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Davis Silverman</li>
<li>Noam Gagliardi Rabinovich</li>
<li>Sean McArthur</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-03-25">meeting this
week</a>
discussed various things: attribute parsing in macros, opt-in built-in traits,
SIMD, allowing square brackets in macro invocation, allowing bounds on type
parameters in structs, private fields by default, the fate of
<code>collections::List</code>, and bounds on trait paths.</p>

<h1>RFCs</h1>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/23">Smaller refcounts</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/22">Deserializing to a stream of tagged
values</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/20">Allow bounds on all type
parameters</a></li>
</ul>


<h1>Project Updates</h1>

<ul>
<li><a href="https://github.com/KokaKiwi/rust-highlight">rust-highlight</a> can be used to
highlight Rust code in LaTeX, HTML, and JSON.</li>
<li><a href="https://github.com/arjantop/rust-tabular">rust-tabular</a>, a library for
handling delimiter-separated values (commas, tabs, or any other character),
as well as fixed columns of fixed width.</li>
<li><a href="https://github.com/BurntSushi/rust-csv">rust-csv</a>, a CSV library which
implements <code>Encoder</code> and <code>Decoder</code> for <code>serialize</code> support.</li>
</ul>


<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>In the last two weeks, we landed 33 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Lars Bergstrom landed a Rust upgrade, bringing us to late February in
<a href="https://github.com/mozilla/servo/pull/1934">#1934</a></li>
<li>ms2ger cleaned up some sketchy use of unsafe native pointers, wrapping them
in a <code>JS&lt;T&gt;</code> in <a href="https://github.com/mozilla/servo/pull/1915">#1915</a></li>
<li>Matt Brubeck named the WorkQueue tasks so that we&rsquo;ll know where failure is
coming from during parallel layout in
<a href="https://github.com/mozilla/servo/pull/1977">#1977</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Matt Brubeck (mbrubeck)</li>
</ul>


<h2>Meetings and Notes</h2>

<p>Patrick Walton authored and combined the final set of changes required to get
Servo <a href="https://twitter.com/pcwalton/status/449299846873108480">passing ACID2</a>!</p>

<p>Matthew Brubeck has joined the Servo team full-time, coming over from the
Firefox Metro project.</p>

<p>In the meeting <a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-17">two weeks
ago</a>, we discussed
the Rust upgrade, z-index support, and ACID2. In the most recent
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-24">meeting</a>, we
provided an update on ACID2 and the status of Servo on Android.</p>

<h1>Other Announcements</h1>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/009223.html">Official Installers and
Nightlies</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/24/this-week-in-rust/"/>
    <updated>2014-03-24T23:33:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/03/24/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This weeks flips the switch from libgreen-by-default to libnative-by-default.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>91 pull requests were merged this week, topping the <a href="http://cmr.github.io/blog/2014/02/23/this-week-in-rust/">previous
record</a> of 89.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Logging <a href="https://github.com/mozilla/rust/pull/12791">has been extracted to its own
crate</a>. Using the logging macros
(<code>debug!</code> etc) now requires a <code>#[phase(syntax, link)] extern crate log;</code>.</li>
<li>The <code>AtomicFlag</code> type <a href="https://github.com/mozilla/rust/pull/12951">has been
removed</a>.</li>
<li><code>std::vec</code> <a href="https://github.com/mozilla/rust/pull/12772">has been renamed</a> to
<code>std::slice</code>, and the old <code>std::vec_ng</code> <a href="https://github.com/mozilla/rust/pull/13028">moved into its
place</a>.</li>
<li>A <code>Share</code> built-in trait <a href="https://github.com/mozilla/rust/pull/12686">has been
added</a>. It also adds an
<code>Unsafe&lt;T&gt;</code> type, which is now the <em>only</em> &ldquo;safe&rdquo; way of achieving internal
mutability (what the <code>Cell</code> types etc do). This <code>Share</code> trait means that the
type is thread-safe. See the pull request for more details. In particular,
taking the address of a static who contains an <code>Unsafe</code> member is not
allowed.</li>
<li><code>std::cast::transmute_immut_unsafe</code> <a href="https://github.com/mozilla/rust/pull/13015">has been
removed</a> because it is
expressible by safe code.</li>
<li><code>libnative</code> <a href="https://github.com/mozilla/rust/pull/12833">is now the default
runtime</a>. In the process, the
<code>#[no_uv]</code> attribute was renamed to <code>#[no_start]</code>.</li>
<li>Atomics <a href="https://github.com/mozilla/rust/pull/13036">no longer require mutable references to
change</a>, due to the work on
<code>Share</code>, they can safely use interior mutability. Additionally, the generic
atomics have been hidden and <code>AtomicU64</code> has been removed, because not all
targets support it.</li>
<li>The <code>push_bytes</code> and <code>read_bytes</code> methods on <code>Reader</code> and <code>Writer</code> <a href="https://github.com/mozilla/rust/pull/12907">have
been renamed</a> for clarity.</li>
<li><code>RefCell::with</code> and <code>RefCell::with_mut</code> <a href="https://github.com/mozilla/rust/pull/13052">have been
removed</a>, because the Deref
changes make them unnecessary.</li>
<li>The <code>get</code> methods on <code>Ref</code> and <code>RefMut</code> (helpers returned by <code>RefCell</code>)
<a href="https://github.com/mozilla/rust/pull/13053">have been removed</a>, because
the Deref changes make them unnecessary.</li>
<li>The <code>Freeze</code> trait <a href="https://github.com/mozilla/rust/pull/13076">has been
removed</a></li>
<li><code>std::managed</code> <a href="https://github.com/mozilla/rust/pull/13089">has been
removed</a> from the public API.</li>
<li><code>HashMap</code> <a href="https://github.com/mozilla/rust/pull/13088">now correctly uses
<code>TotalEq</code></a>.</li>
<li>The <code>to_owned_vec</code> method on <code>Iterator</code> <a href="https://github.com/mozilla/rust/pull/13090">has been
removed</a>.</li>
<li>The <code>equals</code> method <a href="https://github.com/mozilla/rust/pull/13102">has been
removed</a> from <code>TotalEq</code>, due to
the recent changes in <code>TotalEq</code>&rsquo;s semantics.</li>
<li>Trait implementations may <a href="https://github.com/mozilla/rust/pull/13006">no
longer</a> implement a method
twice.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Some bugs with cross-crate autoderef <a href="https://github.com/mozilla/rust/pull/13087">have been
fixed</a>.</li>
<li>Some Windows issues with non-English locales <a href="https://github.com/mozilla/rust/pull/13078">have been
fixed</a>.</li>
<li>Removing two words from a structure in libsyntax <a href="https://github.com/mozilla/rust/pull/13016">shaved 100MB off the
librustc compile</a>.</li>
<li>Some well-placed indirection in librustc <a href="https://github.com/mozilla/rust/pull/13013">shaved 200MB off the librustc
compile</a>.</li>
<li>Discarding some data after it&rsquo;s no longer useful <a href="https://github.com/mozilla/rust/pull/12770">shaved another 100MB off
the librustc compile</a>.</li>
<li>The new attribute syntax <a href="https://github.com/mozilla/rust/pull/13037">has been
implemented</a>, though the old has
not yet been replaced.</li>
<li><code>Vec</code> is <a href="https://github.com/mozilla/rust/pull/13020">now in the prelude</a>,
as well as the lint for uses of <code>~[T]</code> being made allow by default.</li>
<li>Some false positives for crate searching <a href="https://github.com/mozilla/rust/pull/13017">have been
fixed</a>.</li>
<li>A few bugs with struct ABI on x86 <a href="https://github.com/mozilla/rust/pull/12762">have been
fixed</a>.</li>
<li>Mutable slices in <code>static mut</code> <a href="https://github.com/mozilla/rust/pull/12742">are now
allowed</a>.</li>
<li>Some <code>@</code> has been removed from rustc, <a href="https://github.com/mozilla/rust/pull/12735">yielding an 11k line
patch</a>.</li>
<li><code>bigint</code> <a href="https://github.com/mozilla/rust/pull/12924">has seen some
optimization</a>, though not major.</li>
</ul>


<p>The <a href="http://www.meetup.com/Rust-Bay-Area/events/168366122/">doc sprint</a>
happened last week. A bunch of pull requests for docs for this landed:</p>

<ul>
<li><code>std::ops</code> (from the rollup)</li>
<li><a href="https://github.com/mozilla/rust/pull/12940"><code>time::Tm</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12942"><code>getopts</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12944">Endian conversion in
<code>std::mem</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12954"><code>std::sync::atomics</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12955"><code>std::vec_ng</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12982"><code>std::option</code></a></li>
<li><a href="https://github.com/mozilla/rust/pull/12948"><code>term</code></a></li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Eunchong Yu</li>
<li>Jonathan S</li>
<li>Jorge Aparicio</li>
<li>Ms2ger</li>
<li>Olle Jonsson</li>
<li>Ryan Scheel (Havvy)</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-03-18">weekly
meeting</a>
discussed using GitHub for RFCs, the docsprint, and one of the RFCs.</p>

<h1>RFCs</h1>

<p>Some new RFCs:</p>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/12">Tweaked Variance Inference</a></li>
<li>Another struct inheritance RFC, <a href="https://github.com/rust-lang/rfcs/pull/11">extending
enums</a></li>
<li>Another one, <a href="https://github.com/rust-lang/rfcs/pull/10"><code>abstract struct</code> and <code>abstract
enum</code></a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/18">Unsurprising module imports</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/17"><code>Iterable</code> trait family</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/16">Attributes on match arms and
statements</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/15">SIMD Support</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/19">Opt-in builtin traits</a></li>
</ul>


<h1>Project Updates</h1>

<p><a href="https://github.com/dobkeratops/rustfind">rustfind</a>, doomlord&rsquo;s code browser
for Rust, <a href="http://www.reddit.com/r/rust/comments/20q3uz/rustfind_code_browser/">has been updated</a>.
This is a very nice librustc-integrated tool that supports jump-to-definition.</p>

<p>Relatedly, I&rsquo;m reminded of <a href="https://github.com/dobkeratops/unfold">unfold</a>,
doomlord&rsquo;s tool for displaying &ldquo;brace context&rdquo; of code. It includes an &ldquo;rg&rdquo;
script, which is a simple grep for item definitions.</p>

<p>In leiu of a &ldquo;This Week in Servo&rdquo;, Servo <a href="http://imgur.com/a/O667X">has been making
progress</a> on <a href="http://acid2.acidtests.org/">Acid2</a>.</p>

<h1>Other Announcements</h1>

<ul>
<li><a href="http://nethack4.org/blog/memory.html">Memory Management in C Programs</a> &mdash;
this is a very well written article from the nethack team. All the concepts
discussed within apply to Rust.</li>
<li><a href="http://blog.babelmonkeys.de/2014/03/18/dst.html">Dynamically Sized Types in
Rust</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/009087.html">Announcing the new Rust package manager,
Cargo</a>.
It&rsquo;s on <a href="https://github.com/carlhuda/cargo">github</a>.</li>
<li><a href="http://dwarfstd.org/ShowIssue.php?issue=140129.1">Rust is in the next DWARF
standard!</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/20nnkk/rust_and_emscripten_a_small_success/">A success story of Rust and
emscripten</a></li>
<li><a href="http://www.meetup.com/Rust-London-User-Group/">A Rust meetup group in
London</a></li>
<li><a href="http://featherweightmusings.blogspot.com.br/2014/03/subtyping-and-coercion-in-rust.html">Subtyping and coercion in
Rust</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/15/this-week-in-rust/"/>
    <updated>2014-03-15T23:33:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/03/15/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>66 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Some more string methods <a href="https://github.com/mozilla/rust/pull/12797">now return
Option</a>.</li>
<li>Matching on <code>~str</code> <a href="https://github.com/mozilla/rust/pull/12756">has been
removed</a>.</li>
<li>IO iterators <a href="https://github.com/mozilla/rust/pull/12414">now yield
IoResult</a>.</li>
<li>The channel types and constructor <a href="https://github.com/mozilla/rust/pull/12815">have been
renamed</a>. <code>Chan</code> is now <code>Sender</code>,
<code>Port</code> is now <code>Receiver</code>, and <code>Chan::new</code> is now <code>std::comm::channel</code>.</li>
<li><code>std::cmp::{min, max}</code> <a href="https://github.com/mozilla/rust/pull/12869">now require
TotalOrd</a>. For floats, use
<code>a.min(b)</code>.</li>
<li>The handling of <code>cfg(not(a, b))</code> <a href="https://github.com/mozilla/rust/pull/12893">has changed
slightly</a>.</li>
<li><code>libextra</code> <a href="https://github.com/mozilla/rust/pull/12896">has finally been
purged</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Another great PR from the illustrious ktt3ja, the compiler <a href="https://github.com/mozilla/rust/pull/12238">will now give
suggestions</a> on how to fix
lifetime woes. This is an awesome usability improvement.</li>
<li>Implementations of <code>Deref</code> and <code>DerefMut</code> <a href="https://github.com/mozilla/rust/pull/12610">are now
considered</a> for automatic
dereferencing.</li>
<li>Partial type hints <a href="https://github.com/mozilla/rust/pull/12764">are now
implemented</a>, but not at the item
level (in function returns etc). The eventual goal is to have
<code>some_iter.collect::&lt;Vec&lt;_&gt;&gt;()</code> be possible.</li>
<li>There is a <a href="http://static.rust-lang.org/doc/master/guide-unsafe.html">new
guide</a> for &ldquo;low level and unsafe code&rdquo;.
<a href="https://github.com/mozilla/rust/pull/12887">PR</a>.</li>
<li>There is now a lint for <a href="https://github.com/mozilla/rust/pull/12861">uses of
<code>~[T]</code></a>. It&rsquo;s very verbose. The
replacement for <code>~[T]</code>, as recommended by the lint, is <code>std::vec_ng::Vec&lt;T&gt;</code>.
It implements almost everything <code>~[T]</code> does.</li>
<li><code>HashMap</code> <a href="https://github.com/mozilla/rust/pull/12081">has been
reimplemented</a> to use <a href="http://codecapsule.com/2013/11/11/robin-hood-hashing/">Robin Hood
hashing</a>. It&rsquo;s now much
more faster, and uses less space.</li>
<li>Support for basic backtracing <a href="https://github.com/mozilla/rust/pull/12602">has been
reimplemented</a>.</li>
<li><code>char</code> <a href="https://github.com/mozilla/rust/pull/12561">now has simple case
folding</a>. That is, basic
locale-ignorant case conversion.</li>
<li><p>Inline assembly <a href="https://github.com/mozilla/rust/pull/12798">now supports the <code>+</code>
modifier</a>.</p>

<h2>New Contributors</h2></li>
<li><p>Adolfo Ochagavía</p></li>
<li>Clark Gaebel</li>
<li>Peter Marheine</li>
<li>Piotr Czarnecki</li>
<li>Piotr Zolnierek</li>
<li>Robert Gawdzik</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-03-11">weekly
meeting</a>
discussed the new hashmap, destructuring the <code>self</code> argument, partial type
hints, coercion of returned values, as well as the requirements of unsafe
pointers and the continued existence of <code>*mut</code>.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>In the last two weeks, we landed 56 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton made fixes to ACID in
<a href="https://github.com/mozilla/servo/pull/1905">#1905</a></li>
<li>Along with about 20 other PRs, ms2ger brought WindowTimers up to date with
the spec in <a href="https://github.com/mozilla/servo/pull/1890">#1890</a></li>
<li>Pradeep Kumar implemented <code>position:absolute</code> in
<a href="https://github.com/mozilla/servo/pull/1681">#1681</a> and fixed up relative
positioning in <a href="https://github.com/mozilla/servo/pull/1808">#1808</a></li>
<li>Bill Yang fixed up our instructions for installation on Ubuntu Linux in
<a href="https://github.com/mozilla/servo/pull/1881">#1881</a></li>
<li>Bruno Abinader fixed up HTMLCollection in
<a href="https://github.com/mozilla/servo/pull/1838">#1838</a></li>
<li>Isabelle Carter ensured that children of <code>position:fixed</code> items make it into
the correct DisplayList in <a href="https://github.com/mozilla/servo/pull/1832">#1832</a></li>
<li>Manish Goregaokar made <code>getElementsByName</code> return a <code>NodeList</code> in
<a href="https://github.com/mozilla/servo/pull/1756">#1756</a></li>
<li>Keegan McAllister cleaned up our reftest harness and made them test both the
CPU and GPU rendering paths in
<a href="https://github.com/mozilla/servo/pull/1804">#1804</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Bill Yang (analyst74)</li>
<li>Manish Goregaokar (manishearth)</li>
</ul>


<h2>Meetings and Notes</h2>

<p>At this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-03-10">meeting</a>, we
discussed HTML parsing, embedding, writing modes, the ACID2 burndown, and the
Rust upgrade.</p>

<h1>RFCs</h1>

<p><a href="https://github.com/rust-lang/rfcs/blob/master/active/0001-rfc-process.md">We have a new RFC
process</a>!
Every week I&rsquo;ll list the new RFCs and RFCs that have been accepted.
Contributing to the discussions around these RFCs is the easiest way to drive
the design of Rust.</p>

<p>As an aside, I will no longer include any RFCs in the &ldquo;Announcements&rdquo; section
that are not sent to the RFC repository.</p>

<ul>
<li><a href="https://github.com/rust-lang/rfcs/pull/1">Private Fields by Default</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/3">Rearchitecting the attribute-usage lint</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/4">Unified Function Call Syntax</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/5">Virtual Structs</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/7">Add OsUnknown as a target operating system</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/8">Redesign Compiler Intrinsics</a></li>
<li><a href="https://github.com/rust-lang/rfcs/pull/9">&ldquo;Fat Objects&rdquo; for DSTs</a>, an
alternative to &ldquo;Virtual Structs&rdquo;.</li>
</ul>


<h1>Project Updates</h1>

<p><a href="https://github.com/arjantop/rust-bencode">rust-bencode</a>, a pure Rust
implementation of Bencode encoding.
<a href="http://en.wikipedia.org/wiki/Bencode">Bencode</a> is used primarily in the
BitTorrent protocol. This implementation leverages the <code>serialize</code> crate for
automatic Encodable/Decodable implementation as well as custom, more flexible
FromBencode/ToBencode traits.</p>

<p><a href="https://gist.github.com/Kimundi/8782487">Lazily initialized statics v0.2</a>.
This makes safe use of statics for types which require runtime initialization
almost trivial. It utilizes the recent overloadable deref to do optional
initialization before returning the reference to the wrapped type. It&rsquo;s an
example that the right amount of abstractions, but syntactic (macros) and
semantic (operator overloading) can reduce boilerplate for a more pleasant
experience.</p>

<p><a href="https://github.com/phildawes/racer">Racer</a> &ndash; code completion for Rust. This
project is in its early stages, but can already do a fair bit of useful
completion. It is not using the parser (libsyntax) or compiler (librustc), so
it will likely always be inaccurate in some respect. Nevertheless, this may
prove to be an incredibly useful tool.</p>

<p><a href="https://github.com/BurntSushi/quickcheck">QuickCheck for Rust</a>. This has some
seriously great docs. QuickCheck, originally from Haskell, is a way of doing
property-based testing. You describe certain properties your code should have
and it generates random inputs, trying to find inputs that violate those
properties. This is a modern, featureful port of QuickCheck and hopefully gets
even more useful as time goes on.</p>

<p>The <a href="https://github.com/uutils/coreutils">coreutils port</a> is still alive and
making progress. 32 out of 119 programs are implemented. This is a great
project to contribute to if you want a relatively self-contained,
goal-oriented task. It&rsquo;s great practice both for learning Unix* (some of these
utilities are quirky or not-frequently-used) and Rust.</p>

<p>* Well, specifically GNU, which as we all know, <a href="https://en.wikipedia.org/wiki/GNU">ain&rsquo;t
Unix</a>.</p>

<h1>Other Announcements</h1>

<ul>
<li><a href="http://www.fastcolabs.com/3027664/under-the-hood-of-mozillas-new-multi-core-browser-and-the-open-source-language-that-powers-i">Under The Hood Of Mozilla&rsquo;s New Multi-Core Browser And The Open Source
Language That Powers
It</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/20ct5c/march_meetup_live_stream_link_oss_parallel_layout/">Bay Area Rust, March 2014
Meetup</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/20aj03/writing_an_os_in_rust_in_tiny_steps_steps_15/">Writing an OS in Rust in tiny
steps</a></li>
<li><a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/8878">&ldquo;Virtual fn&rdquo; is a bad
idea</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/11/this-week-in-rust/"/>
    <updated>2014-03-11T23:45:00-04:00</updated>
    <id>http://cmr.github.io/blog/2014/03/11/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This week was the Winter Workweek.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>66 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>Any</code> <a href="https://github.com/mozilla/rust/pull/12667">has been cleaned up</a>, and
in particular the <code>as_void_ptr</code> and <code>as_mut_void_ptr</code> methods are gone.</li>
<li>Patterns are <a href="https://github.com/mozilla/rust/pull/12715">no longer allowed in extern function
declarations</a>. Previously, they
either silently passed or ICEd.</li>
<li>Comparison traits <a href="https://github.com/mozilla/rust/pull/12520">have been
reworked</a>.</li>
<li>DeepClone <a href="https://github.com/mozilla/rust/pull/12706">has been removed</a>.</li>
<li>Compound assignment (eg, <code>+=</code>) <a href="https://github.com/mozilla/rust/pull/12733">is no longer
allowed</a> on potentially
uninitialized variables.</li>
<li><code>std::rand</code> <a href="https://github.com/mozilla/rust/pull/12650">has been moved into a
<code>librand</code></a>.</li>
<li>debuginfo flags <a href="https://github.com/mozilla/rust/pull/12714">have changed
slightly</a>, and more limited
debuginfo is supported again (only line number information).</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Dereferencing <a href="https://github.com/mozilla/rust/pull/12491">is now
overloadable</a>. This is another
part of the smart pointer changes. Code like <code>let x = *Rc::new(5);</code> is now
valid. There is a follow-up pull request that will automatically dereference
smart pointers where appropriate, to avoid expressions like
<code>foo.borrow().get().borrow_mut().get()</code>.</li>
<li>Hexadecimal floating point literals <a href="https://github.com/mozilla/rust/pull/12652">are now
available</a> through a syntax
extension.</li>
<li>Support for creating binary installer tarballs <a href="https://github.com/mozilla/rust/pull/12793">has
landed</a>.</li>
<li>Linker arguments <a href="https://github.com/mozilla/rust/pull/12688">are no longer
deduplicated</a>.</li>
<li>Weak linkage etc <a href="https://github.com/mozilla/rust/pull/12556">is now
possible</a> via a <code>linkage</code>
attribute.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Dmitry Promsky</li>
<li>Mike Boutin</li>
<li>Robert Gawdzik</li>
</ul>


<h1>Weekly Meeting</h1>

<p>There was no weekly meeting due to the workweek. There are <a href="https://github.com/mozilla/rust/wiki/Meeting-workweek-2014-03-03">notes and
minutes</a>,
however, and there will be many <a href="https://github.com/rust-lang/rfcs">RFCs</a> from
it.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/20143y/leveraging_tuples_to_make_a_statically_typed/">Leveraging tuples to make a statically-typed, concatenative
EDSL</a></li>
<li><a href="http://featherweightmusings.blogspot.com/2014/03/subtyping-and-coercion-in-rust.html">Subtyping and coercion in
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1ztahv/rust_language_support_in_atom/">Rust support for the Atom
editor</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/03/02/this-week-in-rust/"/>
    <updated>2014-03-02T12:43:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/03/02/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>83 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>IterBytes and <code>std::to_bytes</code> <a href="https://github.com/mozilla/rust/pull/12492">have been
removed</a>. If you were depending on
them for anything non-<code>Hash</code> related, look into using <code>serialize</code> instead.</li>
<li><code>break</code> and <code>continue</code> <a href="https://github.com/mozilla/rust/pull/12338">are now hygienic in
macros</a>, with respect to labels.
Unfortunately there&rsquo;s a bug in it where <a href="https://github.com/mozilla/rust/issues/12512">loop labels hide variables of the
same name</a>.</li>
<li><code>extern fn</code> <a href="https://github.com/mozilla/rust/pull/12328">now always means <code>extern "C"
fn</code></a>, rather than being
context-dependent.</li>
<li><code>std::run</code> <a href="https://github.com/mozilla/rust/pull/12380">has been removed</a>,
and <code>std::io::process</code> improved to pick up the slack.</li>
<li><code>#[deriving(ToStr)]</code> <a href="https://github.com/mozilla/rust/pull/12412">has been
removed</a> in favor of
<code>#[deriving(Show)]</code>. <code>ToStr</code> is now implemented over all types which implement
<code>Show</code>, as <code>format!("{}" val)</code>.</li>
<li><code>flate</code> <a href="https://github.com/mozilla/rust/pull/12445">now returns a
<code>CVec&lt;u8&gt;</code></a> rather than a <code>~[u8]</code>,
for efficiency.</li>
<li><code>extra::json</code> <a href="https://github.com/mozilla/rust/pull/12453">has been
liberated</a> and now lives in
<code>libserialize</code>.</li>
<li><code>swap_remove</code> on vectors <a href="https://github.com/mozilla/rust/pull/12481">now returns an
<code>Option</code></a>.</li>
<li>A curious bug where bindings in match weren&rsquo;t treated as assignment <a href="https://github.com/mozilla/rust/pull/12508">has
been fixed</a>. See the associated
bug report for examples which this will break.</li>
<li>Some useless reexports <a href="https://github.com/mozilla/rust/pull/12485">have been
removed</a> from the prelude.</li>
<li>The <code>Bool</code> trait <a href="https://github.com/mozilla/rust/pull/12473">has been
removed</a>.</li>
<li>A bug where operator overloads were over-zealous <a href="https://github.com/mozilla/rust/pull/12493">has been
fixed</a>.</li>
<li>Statics are <a href="https://github.com/mozilla/rust/pull/11979">no longer allowed to contain anything with
destructors</a>. The exact rules are
laid out quite nicely in the PR.</li>
<li><code>collections:List</code> <a href="https://github.com/mozilla/rust/pull/12348">has been refactored to use
iterators</a>.</li>
<li><code>HashMap</code> <a href="https://github.com/mozilla/rust/pull/12544">is now generic over
hashers</a>.</li>
<li><code>assert_eq!</code> <a href="https://github.com/mozilla/rust/pull/12626">now uses <code>{}</code> instead of <code>{:?}</code> for the error
message</a>.</li>
<li>Type parameter overrides <a href="https://github.com/mozilla/rust/pull/12525">are now feature
gated</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Invalid crate handling <a href="https://github.com/mozilla/rust/pull/12645">is now more
graceful</a>.</li>
<li><code>std::io::stdout()</code> and <code>stderr()</code> <a href="https://github.com/mozilla/rust/pull/12630">are buffered by default
now</a>.</li>
<li>Improper operator overloads <a href="https://github.com/mozilla/rust/pull/12638">are no longer an
ICE</a>.</li>
<li>There&rsquo;s now a warning for <a href="https://github.com/mozilla/rust/pull/12595">publicly exposing private types in function
signatures</a>.</li>
<li><code>libnative</code>&rsquo;s Windows file handling <a href="https://github.com/mozilla/rust/pull/12584">has been
rewritten</a> and now actually works.
rustc uses libnative by default now.</li>
<li>Generated binary size <a href="https://github.com/mozilla/rust/pull/12616">has been brought down a
bit</a>. There is much more room for
improvement.</li>
<li>&ldquo;Strict Version Hashes&rdquo; <a href="https://github.com/mozilla/rust/pull/12533">have been
introduced</a>. This is a purely
internal change. The hash is of the crate&rsquo;s public ABI and rustc checks this
when linking crates together, to avoid problems such as &ldquo;def id drift&rdquo;.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Daniel Fagnan</li>
<li>Felix Crux</li>
<li>Gary M. Josack</li>
<li>George Papanikolaou</li>
<li>Jag Talon</li>
<li>Johannes Löthberg</li>
<li>Mickaël Delahaye</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-25">weekly
meeting</a>
discussed TotalEq/TotalOrd, weak extern functions, channel naming, and a brief
discussion on <code>use</code> paths being absolute.</p>

<p>It was announced that a Sam Wright has been contracted to work on the
tutorial, and the Michael Woerister has been contracted to work on debug info.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 27 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Josh Matthews landed the massive changes to remove <code>@mut</code> from the DOM types
in preparation for a Rust upgrade in
<a href="https://github.com/mozilla/servo/pull/1735">#1735</a>
<a href="https://github.com/mozilla/servo/pull/1591">#1591</a> and
<a href="https://github.com/mozilla/servo/pull/1755">#1755</a>.</li>
<li>Tetsuharu Ohzeki refactored our commandline options out of the rendering
crate and into a more reasonable place in
<a href="https://github.com/mozilla/servo/pull/1738">#1738</a>.</li>
<li>Ms2ger simplified our Document implementation in
<a href="https://github.com/mozilla/servo/pull/1739">#1739</a>.</li>
<li>Patrick Walton removed the need to explicitly create leaf sets during
parallel layout in <a href="https://github.com/mozilla/servo/pull/1700">#1700</a>.</li>
<li>Harrison Gentry cleaned up some type names in
<a href="https://github.com/mozilla/servo/pull/1781">#1781</a>.</li>
<li>Keegan McAllister moved fontconfig in-tree on Linux in order to get a
thread-safe implementation in
<a href="https://github.com/mozilla/servo/pull/1780">#1780</a>.</li>
<li>Saurabh Anand made the DOM parser pass in the correct content types in
<a href="https://github.com/mozilla/servo/pull/1775">#1775</a>.</li>
<li>tgkokk fixed the bindings generator to no longer produce .pyc files in
<a href="https://github.com/mozilla/servo/pull/1735">#1735</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Saurabh Anand (sawrubh)</li>
<li>Harrison Gentry (hgentry)</li>
<li>tgkokk</li>
</ul>


<h2>Meetings</h2>

<p>At this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-02-24">meeting</a>, we
discussed embedding, the JSManaged conversion, a Rust upgrade, vtables, and
recruiting efforts.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2014/02/28/rust-rfc-opt-in-builtin-traits/">RFC: Opt-in Builtin
Traits</a></li>
<li><a href="https://github.com/mozilla/rust/issues/9912#issuecomment-36073562">Structural single-inheritance
counter-proposal</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2014/02/25/rust-rfc-stronger-guarantees-for-mutable-borrows/">RFC: Stronger Guarantees for Mutable
Borrows</a></li>
<li><a href="https://github.com/kvark/dark">Dark</a>, an experimental universal data
compressor based on the BWT-DC scheme</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/008832.html">cargo-lite
v1.1.0 release</a></li>
<li><a href="http://pcwalton.github.io/blog/2014/02/25/revamped-parallel-layout-in-servo/">Revamped parallel layout in
servo</a></li>
<li><a href="https://air.mozilla.org/rust-meetup-february-2014/">February Bay Area Rust
Recording</a></li>
<li><a href="https://github.com/brianmadden/rust-bloom-filter">A bloom filter implementation</a></li>
<li><a href="https://github.com/hoeppnertill/redox-tween">A tweening library</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/23/this-week-in-rust/"/>
    <updated>2014-02-23T16:09:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/23/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This is the busiest week in This Week in Rust&rsquo;s history, <a href="http://buildbot.rust-lang.org/bors/bors.html">and the pull request
queue isn&rsquo;t getting any
shorter</a>. This is a mixed
blessing: tons of work is getting done, but it takes forever to get merged.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>89 pull requests were merged this week. This is the most pull requests merged
in a week, ever. 10 1.0 issues were closed this week, and 0 opened.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Unique vector patterns (matching on a <code>~[]</code>) <a href="https://github.com/mozilla/rust/pull/12244">has been removed from the
language</a>. One can still match
against a slice.</li>
<li><code>std::unstable</code> <a href="https://github.com/mozilla/rust/pull/12311">has been
dismantled</a>. Even as we march
towards 1.0 stability, I will still consider changes to any public interface
breaking.</li>
<li><code>Bitwise::population_count</code> <a href="https://github.com/mozilla/rust/pull/12331">has been
renamed</a> to
<code>Bitwise::count_ones</code>.</li>
<li><code>TaskBuilder</code> <a href="https://github.com/mozilla/rust/pull/12232">has seen some
cleanup</a> to actually use the
emerging &ldquo;builder&rdquo; pattern.</li>
<li>As part of <code>std::num</code>s <a href="https://github.com/mozilla/rust/issues/10387">continued
revamp</a>, <a href="https://github.com/mozilla/rust/pull/12321">the <code>Real</code> trait has
been dismantled</a> in favor of the
<code>Float</code> trait.</li>
<li>Another issue with imports <a href="https://github.com/mozilla/rust/pull/12245">has been
fixed</a>. In particular, when
importing an item where there are two items with the name, one private and one
public, the private one was accidentally imported too. This shouldn&rsquo;t affect
any code, as it&rsquo;s a fairly convoluted case.</li>
<li>UTF-16 handling <a href="https://github.com/mozilla/rust/pull/12317">has been
refactored</a> to match the standard
string APIs.</li>
<li><code>extra::test</code> <a href="https://github.com/mozilla/rust/pull/12343">has been
liberated</a> into a <code>libtest</code>.</li>
<li><code>extra::time</code> <a href="https://github.com/mozilla/rust/pull/12411">has been
liberated</a> into a <code>libtime</code>.</li>
<li><code>EnumSet</code> <a href="https://github.com/mozilla/rust/pull/12415">has been moved</a> into
<code>libcollections</code>.</li>
<li>The <code>Integer</code> trait <a href="https://github.com/mozilla/rust/pull/12326">has
migrated</a> to <code>libnum</code>.</li>
<li><code>std::hash</code> <a href="https://github.com/mozilla/rust/pull/11863">has been rewritten and
redesigned</a>.</li>
<li><code>std::trie</code> and <code>std::hashmap</code> <a href="https://github.com/mozilla/rust/pull/12428">have been
moved</a> into <code>libcollections</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Pull request 12345 was opened. In the spirit of significant arbitrary
numbers, <a href="https://github.com/mozilla/rust/pull/12345">it is absolutely
menial</a>.</li>
<li><code>rustdoc</code> <a href="https://github.com/mozilla/rust/pull/12298">will now test code blocks by
default</a>, not requiring a &ldquo;rust&rdquo;
annotation.</li>
<li>Unix domain sockets <a href="https://github.com/mozilla/rust/pull/12103">are now
implemented</a> in <code>libnative</code>.</li>
<li><code>MutexArc</code> <a href="https://github.com/mozilla/rust/pull/12336">no longer has a <code>Freeze</code>
bound</a>.</li>
<li>rustdoc has seen <a href="https://github.com/mozilla/rust/pull/12339">a bunch of minor
fixes</a>.</li>
<li>More noteworthy, there is now <a href="https://github.com/mozilla/rust/pull/12416">syntax
highlighting</a> in rustdoc output!</li>
<li>The <code>unnecessary_parens</code> lint <a href="https://github.com/mozilla/rust/pull/12366">now looks at
assignments</a> for extraneous
parenthesis.</li>
<li>A bug with infinitely recursing macro errors <a href="https://github.com/mozilla/rust/pull/12370">has been
fixed</a>.</li>
<li><code>std::str::is_utf8</code> <a href="https://github.com/mozilla/rust/pull/12314">has been internally
refactored</a> to use 100% safe code,
as well as get a bit of a speed boost.</li>
<li><code>format!</code> <a href="https://github.com/mozilla/rust/pull/12349">now handles temporaries
better</a>.</li>
<li>If you find yourself working with libsyntax, <a href="https://github.com/mozilla/rust/pull/12387">there is now a <code>-Z</code>
option</a> for dumping the AST as
JSON. This can be useful when trying to figure out what code corresponds to
what structure or enum variant.</li>
<li>Using channels outside of the runtime <a href="https://github.com/mozilla/rust/pull/12397">has been
fixed</a>.</li>
<li>Generic Drop implementations with trait bounds <a href="https://github.com/mozilla/rust/pull/12403">has been
fixed</a>. Yay!</li>
<li>Integer formatting <a href="https://github.com/mozilla/rust/pull/12382">has been
rewritten</a>. It&rsquo;s now cleaner, does
less allocation, and is 3-6x faster in many cases.</li>
<li><code>std::io::stdin</code> <a href="https://github.com/mozilla/rust/pull/12422">is now buffered by
default</a>.</li>
<li>All language items <a href="https://github.com/mozilla/rust/pull/11603">must now be
reachable</a>. Previously this caused
a linker error.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Axel Viala</li>
<li>Craig MacKenzie</li>
<li>Douglas Young</li>
<li>Dylan Braithwaite</li>
<li>Ehsanul Hoque</li>
<li>Sterling Greene</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-18">weekly
meeting</a>
discussed the Hash changes, debug assertions, and commit log administrivia.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 15 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Sankha Narayan Guria made drawing a single line much more efficient in
<a href="https://github.com/mozilla/servo/pull/1709">#1709</a></li>
<li>Lars Bergstrom removed the last of the <code>@mut</code>s not in script in
<a href="https://github.com/mozilla/servo/pull/1712">#1712</a></li>
<li>Junyoung Cho fixed up a bug where we were removing <code>&amp;nbsp;</code>s in
<a href="https://github.com/mozilla/servo/issues/1727">#1727</a></li>
<li>Youngmin Yoo added support for the <code>&lt;object&gt;</code> element in
<a href="https://github.com/mozilla/servo/pull/1664">#1664</a></li>
<li>Keegan McAllister made use of the border box more consistent in layout
in <a href="https://github.com/mozilla/servo/pull/1699">#1699</a></li>
<li>Peiyong Lin fixed up the naming of some of our flow methods in
<a href="https://github.com/mozilla/servo/pull/1693">#1693</a></li>
<li>Simon Sapin refactored the <code>cascade</code> methods in
<a href="https://github.com/mozilla/servo/pull/1706">#1706</a></li>
<li>Adam Sinnett corrected the parent type names of Text, Comment, and PI
types in <a href="https://github.com/mozilla/servo/pull/1702">#1702</a></li>
<li>Patrick Walton added some inlining that sped up flow contruction even
more in <a href="https://github.com/mozilla/servo/pull/1602">#1602</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Peiyong Lin (lpy)</li>
<li>Adam Sinnett (quandrum)</li>
</ul>


<h2>Meetings</h2>

<p>We did not have a meeting this week because of President&rsquo;s Day in the US.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://github.com/drbawb/rust-story"><code>rust-story</code></a>, a Rust port of the
&ldquo;Reconstructing Cave Story&rdquo; video series</li>
<li><a href="http://www.reddit.com/r/rust/comments/1y69r0/rlanerustgamedevkit/"><code>rust-gamedev-kit</code></a>,
a collection of libraries for gamedev</li>
<li><a href="http://www.reddit.com/r/rust/comments/1yfdzh/the_periodic_table_of_rust_types/">Periodic Table of Rust
Types</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1ykop6/so_i_wrote_a_dominion_simulator_in_rust_though/">A Dominion simulator, in
Rust</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-February/008763.html">Travis CI is building pull
requests</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1yr2uz/tetris_game_in_rust/">A terminal tetris game, in
Rust</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/15/this-week-in-rust/"/>
    <updated>2014-02-15T23:20:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/15/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>86 pull requests were merged this week. This ties for week with most merged
pull requests. <a href="http://cmr.github.io/blog/2013/09/23/this-week-in-rust/">A week in September 2013 is the other record
holder</a>. To cope with
the massively inflated queue, there were two roll-ups (not counted).</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>extern mod</code> <a href="https://github.com/mozilla/rust/pull/12017">is now written</a>
<code>extern crate</code>.</li>
<li>The big codegen compiler flags pull request I warned about last week <a href="https://github.com/mozilla/rust/pull/12084">indeed
landed</a>. Many <code>-Z</code> options are now
under <code>-C</code>, and a lot of previously-bare flags (such as <code>--linker</code>) are now
also under <code>-C</code>.</li>
<li><code>std::util</code> <a href="https://github.com/mozilla/rust/pull/11956">has been removed</a>.
<code>swap</code> and <code>replace</code> now live in <code>std::mem</code>.</li>
<li><code>do</code> is once again <a href="https://github.com/mozilla/rust/pull/12170">a reserved
word</a>.</li>
<li><code>extra::rational</code>, <code>extra::bigint</code>, and <code>extra::complex</code> <a href="https://github.com/mozilla/rust/pull/12154">have been
moved</a> into <code>libnum</code> as part of
the libextra dissolution.</li>
<li>The borrow checker&rsquo;s treatment of closures <a href="https://github.com/mozilla/rust/pull/12158">has been
revamped</a>. It fixes all known
soundness issues with closures. Unfortunately, it also breaks some programs
that used to compile.</li>
<li>Channels <a href="https://github.com/mozilla/rust/pull/11578">have been rewritten</a>
to use the internally-upgradable design <a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007924.html">that was hashed out on the
list</a>.
Rather than having a separate <code>SharedChan</code>, <code>Chan</code> is now cloneable.</li>
<li>The <code>Seek</code> API <a href="https://github.com/mozilla/rust/pull/12204">has changed a
bit</a>.</li>
<li>The breaking changes in the <a href="https://github.com/mozilla/rust/pull/12248">first
rollup</a> are the removal of
<code>ptr::offset</code>, <code>ptr::mut_offset</code>, <code>ptr::is_null</code>, and <code>ptr::is_not_null</code> as
free functions and the movement of <code>extra::hex</code> and <code>extra::base64</code> to
<code>libserialize</code>.</li>
<li><code>std::num::Orderable</code> <a href="https://github.com/mozilla/rust/pull/12061">has been
removed</a>.</li>
<li><code>std::ptr</code> <a href="https://github.com/mozilla/rust/pull/12282">saw some more
cleanup</a>, most notably every
function ending in <code>_ptr</code> has had that suffix removed. <code>to_unsafe_ptr</code> and
<code>to_mut_unsafe_ptr</code> have also been removed.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Process arguments and environment variables <a href="https://github.com/mozilla/rust/pull/12283">now use the
<code>from_utf8_lossy</code> function</a> that
was introduced last week, rather than failing on invalid utf8. Additionally,
there are now <code>args_as_bytes</code> and <code>env_as_bytes</code> functions to get arguments
and the environment raw.</li>
<li>The makefiles <a href="https://github.com/mozilla/rust/pull/12274">have been
refactored</a>, and there is now a
<code>make help</code> and <code>make tips</code> for hints on how to use the build system.</li>
<li>In yet another multi-thousand-line patch by eddyb, <a href="https://github.com/mozilla/rust/pull/12162"><code>ast_map::Path</code> no
longer requires cloning</a>, due to
clever devilry.</li>
<li>green task spawning <a href="https://github.com/mozilla/rust/pull/12172">was sped up by almost
5x</a>.</li>
<li>We now <a href="https://github.com/mozilla/rust/pull/12027">bundle and use
compiler-rt</a> for intrinsics rather
than using the system libgcc. We still depend on libgcc for unwinding,</li>
<li>The pidigits benchmark was made 20x faster <a href="https://github.com/alexcrichton/rust/commit/7dc187afd8a19dad05dbf1a689e6b6f400f7bc0a">by optimizing
bigint</a>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Bruno de Oliveira Abinader</li>
<li>Eduard Bopp</li>
<li>Edward Wang</li>
<li>Jake Kerr</li>
<li>Liigo Zhuang</li>
<li>Matthijs van der Vleuten</li>
<li>Peiyong Lin</li>
<li>Tobias Bucher</li>
<li>WebeWizard</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-11">weekly
meeting</a>
discussed struct construction sugar, what to allow in statics, the crate
keyword, a <code>finally</code> macro, and implicit trait bounds.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 18 PRs.</p>

<h2>Notable additions</h2>

<ul>
<li>Bruno Abinader landed several DOM fixes, including
<a href="https://github.com/mozilla/servo/pull/1648">#1648</a> and
<a href="https://github.com/mozilla/servo/pull/1646">#1646</a></li>
<li>Hyun June Kim landed initial <code>:hover</code> support in
<a href="https://github.com/mozilla/servo/pull/1633">#1633</a></li>
<li>Keegan McAllister restored task failure handling in
<a href="https://github.com/mozilla/servo/pull/1691">#1691</a></li>
<li>Rui renamed the .rc files to .rs in the main Servo repository in
<a href="https://github.com/mozilla/servo/pull/1617">#1617</a></li>
<li>Simon Sapin made some updates to attribute selector namespaces in
<a href="https://github.com/mozilla/servo/pull/1653">#1653</a> and
<a href="https://github.com/mozilla/servo/pull/1661">#1661</a></li>
<li>Lars Bergstrom began the removal of non-script-crate <code>@mut</code>s in preparation
for a Rust upgrade in <a href="https://github.com/mozilla/servo/pull/1663">#1663</a></li>
<li>Austin King added some <code>window.console</code> support in
<a href="https://github.com/mozilla/servo/pull/1666">#1666</a></li>
<li>Marek Šuppa landed a fix to our contributing document in
<a href="https://github.com/mozilla/servo/pull/1649">#1649</a></li>
<li>Patrick Walton made extensive optimizations to style sharing in
<a href="https://github.com/mozilla/servo/pull/1644">#1644</a></li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Austin King (ozten)</li>
<li>Marek Šuppa (mrshu)</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-02-10">meeting</a>, we
discussed our embedding plans, ACID2 status, improving the availability of
E-Easy issues, and doing a Rust upgrade (we are more than one month behind
Rust master).</p>

<h1>Announcements, etc</h1>

<p>There is simply too much happening in the community to keep track of! I
recommend browsing <a href="http://www.reddit.com/r/rust">the Rust subreddit</a> for
goings-on. Some notable ones:</p>

<ul>
<li><a href="http://pzol.github.io/getting_rusty/posts/20140203_hashmap/">Rust By Example:
HashMap</a></li>
<li><a href="https://gist.github.com/bvssvni/8970459">State machines using phantom
types</a></li>
<li><a href="http://golo-lang.org/">golo-lang.org</a>&rsquo;s homepage design <a href="http://adridu59.github.io/rust-www/">adapted to
Rust</a>. There is some discussion <a href="http://www.reddit.com/r/rust/comments/1xx3ll/rfc_gololangorg_ported_to_rust/">on
reddit</a>
about this.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/09/this-week-in-rust/"/>
    <updated>2014-02-09T22:15:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/09/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>There were a surprising number of breaking changes this week. The <a href="https://github.com/mozilla/rust/issues/8784">libextra
dissolution continues</a>. Condition
removal and the IO error overhaul also landed. <code>rustpkg</code> was also removed, and
rustc&rsquo;s CLI interface has changed.  Additionally, Rust gained another
full-time developer! A big hello to Nick Cameron, I look forward to seeing his
work.</p>

<p>It was also <a href="http://octoverse.github.com/">discovered</a> that we closed the
second largest number of issues of any repository on GitHub! We trailed behind
homebrew, which is almost cheating, because they use it to track issues on
over five thousand packages. Good job everyone!</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>72 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Some intrinsics <a href="https://github.com/mozilla/rust/pull/12124">have been
moved</a> into <code>std::mem</code>, in
preparations of the intrinsics no longer being publically exposed.</li>
<li>A soundness regression <a href="https://github.com/mozilla/rust/pull/12117">has been
fixed</a>.</li>
<li><code>char</code> <a href="https://github.com/mozilla/rust/pull/12086">now has range asserts</a>.
This may cause invalid uses of <code>char</code> (using invalid values) to break.</li>
<li>The various traits in <code>std::fmt</code> <a href="https://github.com/mozilla/rust/pull/12066">now use
<code>&amp;self</code></a>, rather than a separate
parameter with an argument of type <code>&amp;Self</code>.</li>
<li><code>@self</code> and <code>@Trait</code> (managed trait objects) <a href="https://github.com/mozilla/rust/pull/12030">have been
removed</a>.</li>
<li><code>rustpkg</code> <a href="https://github.com/mozilla/rust/pull/11987">has been removed</a>.</li>
<li><code>std::fmt::Default</code> <a href="https://github.com/mozilla/rust/pull/11948">has been
renamed</a> to <code>Show</code>.</li>
<li>IO errors <a href="https://github.com/mozilla/rust/pull/11946">have been completely
overhauled</a>, and no longer use
conditions. Alex wrote <a href="https://mail.mozilla.org/pipermail/rust-dev/2014-February/008505.html">an
email</a>
to the mailing list summarizing the changes. Especially take note of the
<code>if_ok!</code> macro.</li>
<li>Conditions <a href="https://github.com/mozilla/rust/pull/12039">have been removed
entirely</a>. A detailed post-mortem
is available on the pull request.</li>
<li><code>rustc</code> has seen some work on its interface. The output flags <a href="https://github.com/mozilla/rust/pull/12020">have been
unified</a>, replacing <code>-c</code>,
<code>--emit-llvm</code>, <code>-S</code>, <code>--dylib</code>, <code>--rlib</code>, etc with two arguments: <code>--emit</code> and
<code>--crate-type</code>. There is <a href="https://github.com/mozilla/rust/pull/12084">another PR in the
queue</a> that replaces a bunch of
miscellaneous flags behind <code>-C</code>. It will likely land shortly, and is something
to be aware of.</li>
<li><code>NonCopyable</code> <a href="https://github.com/mozilla/rust/pull/12016">has been renamed</a>
to <code>NoPod</code> to be consistent with the rest of the &ldquo;marker types&rdquo;.</li>
<li><code>reserve</code> naming <a href="https://github.com/mozilla/rust/pull/11951">has been shuffled around
slightly</a>. <code>reserve</code> becomes
<code>reserve_exact</code> and <code>reserve_at_least</code> becomes <code>reserve</code>.</li>
<li><code>SendStr</code> <a href="https://github.com/mozilla/rust/pull/12098">has been removed</a> in
favor of a <code>MaybeOwned</code> type.</li>
</ul>


<p>As part of the libextra dissolution, the following crates have been
introduced:</p>

<ul>
<li><a href="https://github.com/mozilla/rust/pull/12010"><code>libcollections</code></a>, which has
inherited <code>Bitv</code>, <code>BTree</code>, <code>Deque</code>, <code>DList</code>, <code>List</code>, <code>LruCache</code>,
<code>PriorityQueue</code>, <code>RingBuf</code>, <code>SmallIntMap</code>, <code>TreeMap</code>, and <code>TreeSet</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/12007"><code>libgetopts</code></a>, which has
inherited <code>extra::getopts</code>. Additionally, <code>getopts::groups</code> is now the <em>only</em>
interface. It has been moved up a level, into just <code>getopts</code>, and the old
functions have been removed.</li>
<li><a href="https://github.com/mozilla/rust/pull/11984"><code>libserialize</code></a>, which has
inherited <code>extra::serialize</code> and <code>extra::ebml</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/11912"><code>libuuid</code></a>, which has inherited
<code>extra::uuid</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/12012"><code>libsemver</code></a>, which has
inherited <code>extra::semver</code>.</li>
<li><a href="https://github.com/mozilla/rust/pull/11945"><code>libterm</code></a>, which has inherited
<code>extra::term</code> and <code>extra::terminfo</code>.</li>
</ul>


<p>All crates are still documented, and there is a list with links at
<a href="http://static.rust-lang.org/doc/master/index.html">http://static.rust-lang.org/doc/master/index.html</a>.</p>

<h2>Other Changes</h2>

<ul>
<li>A <code>black_box</code> function <a href="https://github.com/mozilla/rust/pull/12105">has been added to
<code>extra::test</code></a>, and the <code>iter</code>
method on BenchHarness can now return values. As
<a href="https://github.com/mozilla/rust/pull/12119">documented</a> (<a href="http://static.rust-lang.org/doc/master/guide-testing.html#benchmarks-and-the-optimizer">generated
version</a>),
these exist to make sure that LLVM will not optimize out benchmarks.</li>
<li>A <code>fourcc!</code> syntax extension <a href="https://github.com/mozilla/rust/pull/12034">has been
added</a>.</li>
<li>A <code>unimplemented!</code> macro <a href="https://github.com/mozilla/rust/pull/12090">has been
added</a>, used much the same as
<code>unreachable!()</code>.</li>
<li>The [runtime libraries <a href="https://github.com/mozilla/rust/pull/12073">have gained
examples</a>, and
<a href="http://static.rust-lang.org/doc/master/green/index.html">libgreen</a> now has an
explanation of how it is structured at a high level, specifically where
concurrency and parallelism come from.</li>
<li>A <code>from_utf8_lossy</code> function <a href="https://github.com/mozilla/rust/pull/12062">has been
added</a> that replaces invalid
codepoints with the unicode replacement character (�).</li>
<li>Network streams <a href="https://github.com/mozilla/rust/pull/11894">are now
cloneable</a>. This allows for
multiple tasks reading/writing a <code>TcpStream</code>.</li>
<li>A copy-on-write Arc container <a href="https://github.com/mozilla/rust/pull/11230">has been added to
libextra</a>, though it&rsquo;s now in
<code>libcontainers</code>.</li>
<li>SIMD types <a href="https://github.com/mozilla/rust/pull/11717">are now allowed in
generics</a>.</li>
<li>A new mutex type that plays well with the various runtimes <a href="https://github.com/mozilla/rust/pull/11866">has been
implemented</a>. It is in the same
ballpark as native, pthread mutexes.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Arcterus</li>
<li>Cole Mickens</li>
<li>Colin Sherratt</li>
<li>HeroesGrave</li>
<li>Ivan Enderlin</li>
<li>James Deng</li>
<li>João Souls</li>
<li>Marek Šuppa</li>
<li>Q.P.Liu</li>
<li>Yuri Kunde Schlesner</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-02-04">weekly
meeting</a>
discussed adding a <code>libprim</code>, operator overloading, and the 1.0 goals for
LLVM.</p>

<h1>Meetups</h1>

<ul>
<li>There will be a meetup <a href="http://www.eventbrite.fr/e/billets-rust-paris-meetup-10528169037">in
Paris</a>, on
February 25, from 18:30 to 23:30.</li>
<li><a href="http://www.meetup.com/Rust-Bay-Area/events/156288462/">Bay Area Rust</a> will
be meeting February 25, at 19:00 in San Francisco. David Renshaw will be
talking about Cap&#8217; Proto, Steven Fackler will be talking about exportable
macros, and Kevin Cantu about testing.</li>
</ul>


<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary
test cases for the Rust language.</p>

<p>This week, we landed 14 PRs, but there are a substantial number of very
close pending PRs that add major layout features to Servo (e.g., lists
markers, tables, initial pseudo-class and pseudo-element support).</p>

<h2>Notable additions</h2>

<ul>
<li>Bruno Abinader continued with his great DOM additions in
<a href="https://github.com/mozilla/servo/pull/1634">#1634</a> and
<a href="https://github.com/mozilla/servo/pull/1622">#1622</a> and
<a href="https://github.com/mozilla/servo/pull/1604">#1604</a></li>
<li>Patrick Kim fixed borders on inline boxes in
<a href="https://github.com/mozilla/servo/pull/1577">#1577</a> and landed
<code>position:relative</code> support in
<a href="https://github.com/mozilla/servo/pull/1613">#1613</a></li>
<li>Patrick Walton further improved layout performance in
<a href="https://github.com/mozilla/servo/pull/1630">#1630</a> and
<a href="https://github.com/mozilla/servo/pull/1615">#1615</a></li>
<li>Adrien Bustany fixed <code>insertBefore</code> in
<a href="https://github.com/mozilla/servo/pull/1621">#1621</a></li>
<li>Lars Bergstrom landed reftest stabilization fixes in
<a href="https://github.com/mozilla/servo/pull/1623">#1623</a> &ndash; we are almost ready to
gate landing commits on content and ref tests passing on Linux, once we get
more fonts <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=968375">installed</a>
on our Linux buildbots</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Adrien Bustany (abustany)</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-02-03">meeting</a>, we mainly
discussed display list construction with respect to layering and stacking
contexts.</p>

<p>Josh Matthews&#8217; talk on Servo at FOSDEM is available
<a href="http://mirrors.dotsrc.org/fosdem/2014/UD2218A/Saturday/Servo_building_a_parallel_web_browser.webm">here</a>.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1wvxcn/lazily_initialized_statics/">Lazily initialized
statics</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1wypbz/rust_gains_a_new_fulltime_developer_nick_cameron/">Rust gains a new full-time developer, Nick
Cameron</a>.</li>
<li><a href="http://www.reddit.com/r/rust/comments/1wz7ws/handling_io_errors/">Handling I/O
Errors</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x0zeu/adler32_and_crc32/">Pure-Rust Adler32 and
CRC32</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x1tvo/closures_and_the_borrow_checker/">Closures and the borrow
checker</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x3ooy/lzw_compression_algorithm/">Pure-Rust LZW Compression
Algorithm</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1x67wq/rust_by_example_default_arguments_named_params/">Rust by Example: Default arguments,
etc</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xaum0/standalone_rust_app/">Standalone rust
app</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xfjo7/ide_support/">IDE support?</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xdlou/playing_with_the_new_rust_io_error_handling/">Playing with the new Rust I/O error
handling</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xdudv/another_failed_attempt_at_parser_combinators/">Another failed attempt at parser
combinators</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xck76/a_case_for_reflection_in_rust/">A case for reflection in
Rust</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1xa8uy/a_persistent_map_implementation_like_in_clojure/">A persistent map implementation, like in Clojure and Scala, with
performance
numbers</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/01/this-week-in-rust/"/>
    <updated>2014-02-01T18:45:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/01/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This was a good week, with default type parameters, <code>do</code> removal, <code>@[]</code>
removal, and some code bloat reduction.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>61 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>do</code> <a href="https://github.com/mozilla/rust/pull/11868">has been removed</a>. Replace
<code>do spawn { ... }</code> with <code>spawn(proc() { ... })</code>.</li>
<li><code>libextra</code> <a href="https://github.com/mozilla/rust/pull/11787">has exploded</a>. <a href="https://github.com/mozilla/rust/pull/11867">It
exploded some more</a>. It will
continue to explode until it no longer exists.</li>
<li><code>#[simd]</code> <a href="https://github.com/mozilla/rust/pull/11738">has been feature
gated</a>.</li>
<li>We <a href="https://github.com/mozilla/rust/pull/11706">now generate static
libraries</a> by default, rather than
dynamic libraries.</li>
<li><code>@[]</code> and <code>@str</code> <a href="https://github.com/mozilla/rust/pull/11974">have been removed from the
language</a>. All that is left is
<code>@T</code>!</li>
<li>Various methods on vectors <a href="https://github.com/mozilla/rust/pull/11944">now return
Options</a>, to be in line with the
rest of everything else.</li>
<li><code>next_power_of_two_opt</code> <a href="https://github.com/mozilla/rust/pull/11930">has been renamed
to</a> <code>checked_next_power_of_two</code>.
Additionally, the various functions for division in <code>std::uint</code> were removed.</li>
<li><code>#[no_send]</code> etc <a href="https://github.com/mozilla/rust/pull/11768">have been removed in favor of marker
types</a>. Additionally, variance of
types and lifetimes can explicitly be annotated with these marker types. They
are zero-sized and have no runtime impact.</li>
<li><code>std::borrow</code> <a href="https://github.com/mozilla/rust/pull/11895">has been
removed</a>.</li>
<li><code>Times</code> <a href="https://github.com/mozilla/rust/pull/11672">has finally been
removed</a>. Good riddance.</li>
<li>The various <code>CopyableVector</code>-like types have <a href="https://github.com/mozilla/rust/pull/11893">been
renamed</a> to
<code>CloneableVector</code> etc.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>There are now lints for <a href="https://github.com/mozilla/rust/pull/11754">unused
values</a>. Types annotated with
<code>#[must_use]</code> will now warn when (surprise) their results are not used.</li>
<li>debuginfo <a href="https://github.com/mozilla/rust/pull/11864">should now be fixed on OS
X</a>, due to us now explicitly
setting the DWARF version.</li>
<li><code>fp-elim</code> <a href="https://github.com/mozilla/rust/pull/11879">has been re-disabled, but only if debuginfo generation is
disabled</a>.</li>
<li>Errors from <code>#[deriving(...)]</code> have
<a href="https://github.com/mozilla/rust/pull/11826">seen</a> some
<a href="https://github.com/mozilla/rust/pull/11834">work</a>.</li>
<li>The evil environment pointers <a href="https://github.com/mozilla/rust/pull/11595">has been removed from bare
functions</a>, as well as <code>self</code> now
being a mostly-normal argument, to the compiler. This was a huge effort (88
changed files with 1,436 additions and 2,138 deletions) by Eduard Burtescu,
and is awesome!</li>
<li>Also from Eduard is <a href="https://github.com/mozilla/rust/pull/11217">default type
parameters</a>! They are currently
behind a feature flag, but allow you to say, for example, <code>struct Foo&lt;T =
uint&gt;</code> and use <code>Foo</code> as a bare type.</li>
<li>The tydesc <a href="https://github.com/mozilla/rust/pull/11909">is used in less
places</a> to help fend off code
bloat.</li>
<li>The occasional infinite recursion in some recursive types <a href="https://github.com/mozilla/rust/pull/11839">has been
fixed</a>.</li>
<li>Take glue <a href="https://github.com/mozilla/rust/pull/11723">has been removed from
tydescs</a>, also to fend off code
bloat.</li>
<li><code>fail!()</code> <a href="https://github.com/mozilla/rust/pull/11841">also generates less code
now</a>, to fend off bloat. In
particular, <code>fn main() { fail!() }</code> now compiles 2-3x faster due to generating
less code.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>JeremyLetang</li>
<li>Johannes Muenzel</li>
<li>Keshav Kini</li>
<li>Michael Darakananda</li>
<li>Nathaniel Herman</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-28">weekly
meeting</a>
discussed default type parameters, the unused result lint, minor changes to
the attribute syntax, how to deal with I/O splitting, and the visit glue.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 32 PRs, significantly above our usual PR landing rate!</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Walton landed a huge number of PRs that significantly improved our
performance and parallelism
<a href="https://github.com/mozilla/servo/pull/1600">#1600</a>,
<a href="https://github.com/mozilla/servo/pull/1564">#1564</a>,
<a href="https://github.com/mozilla/servo/pull/1567">#1567</a>,
<a href="https://github.com/mozilla/servo/pull/1589">#1589</a>,
<a href="https://github.com/mozilla/servo/pull/1566">#1566</a>
<a href="https://github.com/mozilla/servo/pull/1574">#1574</a>,
<a href="https://github.com/mozilla/servo/pull/1571">#1571</a>,
<a href="https://github.com/mozilla/servo/pull/1559">#1559</a>, etc.</li>
<li>Rui (xiongmao86) fixed a linking issue in our Makefiles in
<a href="https://github.com/mozilla/servo/pull/1603">#1603</a>.</li>
<li>Isabelle Carter landed multiple display list support in
<a href="https://github.com/mozilla/servo/pull/1579">#1579</a>.</li>
<li>Lars Bergstrom finally re-enabled ref tests in
<a href="https://github.com/mozilla/servo/pull/1565">#1565</a> and started a quest to
improve test reliability in
<a href="https://github.com/mozilla/servo/pull/1597">#1597</a> and
<a href="https://github.com/mozilla/servo/pull/1570">#1570</a>.</li>
<li>Bruno Abinader pushed on more DOM features in
<a href="https://github.com/mozilla/servo/pull/1583">#1583</a> and
<a href="https://github.com/mozilla/servo/pull/1580">#1580</a>.</li>
<li>Clark Gaebel (wowus) enabled a limit on the number of redirects Servo
follows in <a href="https://github.com/mozilla/servo/pull/1562">#1562</a>.</li>
<li>Tetsuharu Ohzeki cleaned up Node&rsquo;s <code>remove</code> and <code>insert</code> members
<a href="https://github.com/mozilla/servo/pull/1582">#1582</a>.</li>
<li>Deokjin Kim implemented <code>whitespace:pre</code> in
<a href="https://github.com/mozilla/servo/pull/1547">#1547</a>.</li>
<li>Patrick Kim landed border support for inline flows in
<a href="https://github.com/mozilla/servo/pull/1546">#1546</a>.</li>
<li>Simon Sapin used his CSS wizardry to redo a performance tweak we made so
that it&rsquo;s actually spec-compliant in
<a href="https://github.com/mozilla/servo/pull/1560">#1560</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Clark Gaebel (wowus)</li>
<li>Rui (xiongmao86)</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-27">meeting</a>, we
discussed moving the build of fontconfig on Linux into Servo to avoid
situations where the system version is old and not threadsafe, what&rsquo;s blocking
the JSManaged conversion (which is required for our next Rust upgrade), and
the status of ref and content tests.</p>

<p>Josh Matthews is at FOSDEM this weekend, giving a
<a href="http://www.joshmatthews.net/fosdemservo/">talk</a> on Servo. Look for video on
air.mozilla.org shortly!</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.reddit.com/r/rust/comments/1wqjsf/more_xxhash_benchmarks/">An xxHash implementation in
Rust</a>,
as well as some benchmarks comparing to gcc and clang.</li>
<li><a href="http://hydrocodedesign.com/2014/01/31/llvm-with-rust/">Using LLVM From Within
Rust</a></li>
<li><a href="http://vimeo.com/85253071">Felix&rsquo;s CodeMesh presentation</a></li>
<li><a href="https://docs.google.com/a/octayn.net/spreadsheet/ccc?key=0AlWBWplsaTZvdGdSdEVzZW1BeDA5dm0zM2FFeW0ySEE&amp;usp=drive_web#gid=0">A 1.0 roadmap
spreadsheet</a></li>
<li><a href="https://github.com/kballard/rust-lua">rust-lua</a>, safe bindings to Lua 5.1</li>
<li><a href="http://www.infoq.com/interviews/klock-rust?utm_source=infoq&amp;utm_medium=videos_homepage&amp;utm_campaign=videos_row1#.Uupx3qddN-w.reddit">InfoQ interview with
Felix</a></li>
<li><a href="http://blog.safaribooksonline.com/2014/01/30/parameters-bounds-rust/">Parameters and Bounds in
Rust</a></li>
<li><a href="http://blog.safaribooksonline.com/2014/01/28/network-communication-serialization-rust/">Network Communication and Serialization in
Rust</a></li>
<li><a href="https://air.mozilla.org/rust-meetup-january-2014/">Recording of the Bay Area Rust January
meetup</a>, wherein Brian
talks about 1.0, Niko talks about DST, Kevin talks about rust-lua, and I talk
about evangelism.</li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008224.html">Deprecating
rustpkg</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parametric Polymorphism Declaration Syntax in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/02/01/polymorphic-declaration-syntax-in-rust/"/>
    <updated>2014-02-01T17:06:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/02/01/polymorphic-declaration-syntax-in-rust</id>
    <content type="html"><![CDATA[<h1>Summary</h1>

<p>Change the following syntax:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct Foo&lt;T, U&gt; { ... }
</span><span class='line'>impl&lt;T, U&gt; Trait&lt;T&gt; for Foo&lt;T, U&gt; { ... }
</span><span class='line'>fn foo&lt;T, U&gt;(...) { ... }</span></code></pre></td></tr></table></div></figure>


<p>to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>forall&lt;T, U&gt; struct Foo { ... }
</span><span class='line'>forall&lt;T, U&gt; impl Trait&lt;T&gt; for Foo&lt;T, U&gt; { ... }
</span><span class='line'>forall&lt;T, U&gt; fn foo(...) { ... }</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h1>The Problem</h1>

<p>The immediate, and most pragmatic, problem is that in today&rsquo;s Rust one cannot
easily search for implementations of a trait. Why? <code>grep 'impl Clone'</code> is
itself not sufficient, since many types have parametric polymorphism. Now I
need to come up with some sort of regex that can handle this. An easy
first-attempt is <code>grep 'impl(&lt;.*?&gt;)? Clone'</code> but that is quite inconvenient to
type and remember. (Here I ignore the issue of tooling, as I do not find the
argument of &ldquo;But a tool can do it!&rdquo; valid in language design.)</p>

<p>A deeper, more pedagogical problem, is the mismatch between how <code>struct
Foo&lt;...&gt; { ... }</code> is read and how it is actually treated. The straightforward,
left-to-right reading says &ldquo;There is a struct Foo which, given the types &hellip;
has the members &hellip;&rdquo;. This might lead one to believe that <code>Foo</code> is a single
type, but it is not. <code>Foo&lt;int&gt;</code> (that is, type <code>Foo</code> instantiated with type
<code>int</code>) is not the same type as <code>Foo&lt;unit&gt;</code> (that is, type <code>Foo</code> instantiated
with type <code>uint</code>). Of course, with a small amount of experience or a very
simple explanation, that becomes obvious.</p>

<p>Something less obvious is the treatment of functions. What does <code>fn
foo&lt;...&gt;(...) { ... }</code> say? &ldquo;There is a function foo which, given types &hellip;
and arguments &hellip;, does the following computation: &hellip;&rdquo; is not very adequate.
It leads one to believe there is a <em>single</em> function <code>foo</code>, whereas there is
actually a single <code>foo</code> for every substitution of type parameters! This also
holds for implementations (both of traits and of inherent methods).</p>

<p>Another minor problem is that nicely formatting long lists of type parameters
or type parameters with many bounds is difficult.</p>

<h1>Proposed Solution</h1>

<p>Introduce a new keyword, <code>forall</code>. This choice of keyword reads very well and
will not conflict with any identifiers in code which follows the <a href="https://github.com/mozilla/rust/wiki/Note-style-guide">style
guide</a>.</p>

<p>Change the following declarations from</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct Foo&lt;T, U&gt; { ... }
</span><span class='line'>impl&lt;T, U&gt; Trait&lt;T&gt; for Foo&lt;T, U&gt; { ... }
</span><span class='line'>fn foo&lt;T, U&gt;(...) { ... }</span></code></pre></td></tr></table></div></figure>


<p>to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>forall&lt;T, U&gt; struct Foo { ... }
</span><span class='line'>forall&lt;T, U&gt; impl Trait&lt;T&gt; for Foo&lt;T, U&gt; { ... }
</span><span class='line'>forall&lt;T, U&gt; fn foo(...) { ... }</span></code></pre></td></tr></table></div></figure>


<p>These read very well. &ldquo;for all types T and U, there is a struct Foo &hellip;&rdquo;, &ldquo;for
all types T and U, there is a function foo &hellip;&rdquo;, etc. These reflect that there
are in fact multiple functions <code>foo</code> and structs <code>Foo</code> and implementations of
<code>Trait</code>, due to monomorphization. It also allows for grepping for &ldquo;impl
Trait&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asus Vivobook X200]]></title>
    <link href="http://cmr.github.io/blog/2014/01/30/asus-vivobook-x200/"/>
    <updated>2014-01-30T01:36:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/30/asus-vivobook-x200</id>
    <content type="html"><![CDATA[<p>I recently upgraded my aging <a href="http://amzn.to/1fhxWj4">Acer Aspire One</a> with a
new <a href="http://amzn.to/1e9k4ct">Asus Vivobook</a>. It was running a really slow
Intel Atom processor, one of the first generations. It literally took a day to
bootstrap Rust, and not all of that time was spent swapping! It worked well
for what I originally bought it for, which was as a dumb terminal SSHing into
my desktop. I wanted to upgrade to something that could actually run OpenGL
things, as well as browse the web without me wanting to give up and go to bed.</p>

<!-- more -->


<p>The vivobook has served these purposes very well, and at a price that I find
very compelling. It has a decent keyboard layout, as well as a fairly nice
screen, though the viewing angle leaves much to be desired. The webcam and
microphone are of good quality. It has full OpenGL 3.3 (possibly later
versions, once Mesa supports them). It can max out Xonotic and still be
relatively playable (15-20 FPS), with 40+ FPS at high quality. The CPU is only
dual-core, however. It also only has 2G of non-upgradable RAM, which is
problematic but was still an upgrade from the older netbook. The screen also
goes very dim (yay my eyes!), and fairly bright too.</p>

<p>I would recommend it to anyone looking for a cheap laptop. It fits my
ssh-heavy usecase perfectly. My only hesitation is the battery. It only lasts
about 2.5 hours, and almost as long to charge. I bought this after sending
back a <a href="http://amzn.to/1fhALRc">similarly-priced Chromebook</a>, due to the
Chromebook&rsquo;s unfortunate keyboard layout, and poor screen quality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intellectual Growth]]></title>
    <link href="http://cmr.github.io/blog/2014/01/30/intellectual-growth/"/>
    <updated>2014-01-30T00:15:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/30/intellectual-growth</id>
    <content type="html"><![CDATA[<p>I have a <a href="http://amzn.to/1aJdedm">textbook on logic</a>, I found it at the
<a href="http://cmr.github.io/blog/2014/01/06/reading-old-things/">dump</a> probably 3
years ago, during my second year of high school. I tried working through it
many times, but simply could not wrap my head around some of the concepts it
presents. In particular, I found its treatment of formal languages to be
very confusing. I could, for the most part, follow the material as I read it,
but attempting any of the exercises quickly became an exercise in futility.</p>

<p>Currently, I am in the so-called &ldquo;Foundations&rdquo; course (MA211) at my
<a href="http://clarkson.edu/">university</a>. Currently it is covering basic logic:
quantifiers, proofs, etc. Suddenly, I find myself able to tackle some of the
problems from the earlier textbook. Indeed, it is actually starting to make
sense. I find this feeling, the wave of understanding of a previously
impenetrable subject, very pleasant. It usually corresponds with a massive
increase in breadth of understanding, as I make connections to other subjects.
Hopefully I&rsquo;ll get these moments more often as I intensify my studies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/26/this-week-in-rust/"/>
    <updated>2014-01-26T19:00:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/26/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>74 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Struct fields <a href="https://github.com/mozilla/rust/pull/11777">now inherit the privacy of the struct
itself</a>.</li>
<li>A bug in instantiability checking (determining whether a value of a given
type could ever be constructed) <a href="https://github.com/mozilla/rust/pull/11661">has been
fixed</a>.</li>
<li><code>Zero</code> and <code>One</code> <a href="https://github.com/mozilla/rust/pull/11664">have been tightened
up</a>, and fewer types implement
them now.</li>
<li><a href="https://github.com/mozilla/rust/pull/11129">A lot of things have changed</a>
regarding functions that fail or return Options. Almost everything that used
to fail now returns an Option instead.</li>
<li>Many incorrect usages of types from <code>std::libc</code> <a href="https://github.com/mozilla/rust/pull/10943">now use Rust
types</a>. This might introduce an
extra <code>as</code> or few in code using these (relatively obscure) interfaces.</li>
<li><code>invert</code> on <code>DoubleEndedIterator</code> <a href="https://github.com/mozilla/rust/pull/11686">has been
renamed</a> to <code>rev</code>.</li>
<li>The numeric constants <a href="https://github.com/mozilla/rust/pull/11790">have been
uppercased</a>.</li>
<li>Some privacy in std and extra <a href="https://github.com/mozilla/rust/pull/11808">has been shuffled
around</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Most macros are <a href="https://github.com/mozilla/rust/pull/11774">no longer injected as a hard-coded
string</a> and in fact live in
libstd.</li>
<li>Using <code>-Z no-landing-pads</code> <a href="https://github.com/mozilla/rust/pull/11653">actually disables landing pad
generation</a>. It was accidentally
broken.</li>
<li>The FFI documentation <a href="https://github.com/mozilla/rust/pull/11486">now includes a section on
callbacks</a>.</li>
<li>A lint for unnecessary parens on control flow conditions etc <a href="https://github.com/mozilla/rust/pull/11663">has been
added</a>.</li>
<li>Support for ARM&rsquo;s thumb instructions <a href="https://github.com/mozilla/rust/pull/11700">has been
added</a>.</li>
<li>libnative <a href="https://github.com/mozilla/rust/pull/11294">now implements
timers</a>.</li>
<li>There is now <a href="https://github.com/mozilla/rust/pull/11611">exponential notation for float
formatting</a>.</li>
<li><code>Vec&lt;T&gt;</code> <a href="https://github.com/mozilla/rust/pull/11682">has been added</a>, which
is intended to eventually replace <code>~[T]</code>.</li>
<li>Borrow checker errors <a href="https://github.com/mozilla/rust/pull/11718">now have better
spans</a> and should be more
understandable.</li>
<li>It is now possible to <a href="https://github.com/mozilla/rust/pull/11744">opt out of using
rpaths</a>.</li>
<li>libnative <a href="https://github.com/mozilla/rust/pull/11732">now implements
<code>get_host_addresses</code></a>.</li>
<li>A new synchronization primitive, Barrier, <a href="https://github.com/mozilla/rust/pull/11725">has been
added</a>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Andre Arko</li>
<li>Aydin Kim</li>
<li>Ben Harris</li>
<li>Ben Noordhuis</li>
<li>Chris Wong</li>
<li>Daniel MacDougall</li>
<li>Hong Chulju</li>
<li>Jake Greenfield</li>
<li>Matthias Einwag</li>
<li>Philippe Delrieu</li>
<li>Salem Talha</li>
<li>Sean Chalmers</li>
<li>Trent Ogren</li>
<li>Virgile Andreani</li>
<li>comex</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-21">weekly
meeting</a>
discussed a bunch of open pull requests, but nothing too groudbreaking.</p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>This week, we landed 19 PRs and had a Servo workweek in the Mozilla San
Francisco office from Tuesday through Friday (Monday was a US federal
holiday).</p>

<h2>Notable additions</h2>

<ul>
<li>Bruno Abinader implemented Document::createHTMLDocument in
<a href="https://github.com/mozilla/servo/pull/1523">#1523</a>.</li>
<li>Patrick Walton implemented parallel layout for two of our three layout
passes in <a href="https://github.com/mozilla/servo/pull/1493">#1493</a>.</li>
<li>Patrick Kim fixed computation of image box sizes in
<a href="https://github.com/mozilla/servo/pull/1520">#1520</a> and text-decoration in
<a href="https://github.com/mozilla/servo/pull/1506">#1506</a>.</li>
<li>Deokjin Kim landed the <code>white-space:pre</code> property in
<a href="https://github.com/mozilla/servo/pull/1507">#1507</a>.</li>
<li>Aydin Kim and Lars Bergstrom landed fixes for Servo on Android.</li>
<li>Teodor Szente fixed up a type signature in
<a href="https://github.com/mozilla/servo/pull/1541">#1541</a>.</li>
<li>Lars Bergstrom changed ref tests so that they now emit a PNG showing the
image-diff between the baseline and incorrect rendering in
<a href="https://github.com/mozilla/servo/pull/1544">#1544</a>.</li>
</ul>


<h2>New contributors</h2>

<ul>
<li>Teodor Szente</li>
</ul>


<h2>Meetings</h2>

<p>There was no separate Servo meeting, but during the workweek we discussed
details in our designs for
<a href="https://etherpad.mozilla.org/Servo-workweek-layers">layers</a>, <a href="https://etherpad.mozilla.org/Servo-workweek-generated-content">generated
content</a>,
<a href="https://etherpad.mozilla.org/Servo-workweek-tables">tables</a>,
<a href="https://etherpad.mozilla.org/Servo-workweek-pixels">HiDPI/pixels</a>, and
<a href="https://etherpad.mozilla.org/Servo-workweek-displaylist">DisplayList
creation</a>.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008214.html">Rust contribution
ideas</a></li>
<li><a href="https://github.com/SiegeLord/RustAlgebloat">RustAlgebloat</a>, a linear
algebra library</li>
<li><a href="http://glaebhoerl.tumblr.com/rust_closure_types">Table of Potential Closure
Types</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/008088.html">rust-ci
updates</a>,
categorization and documentation uploading</li>
<li><a href="http://thread.gmane.org/gmane.comp.lang.rust.devel/7848">Channel API
proposal</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/18/this-week-in-rust/"/>
    <updated>2014-01-18T20:21:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/18/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>This was a big week. rvalue lifetimes and external syntax extensions landed,
as well as a bunch of codegen optimization.</p>

<!-- more -->


<h1>What&rsquo;s cooking in master?</h1>

<p>69 pull requests were merged this week. As of writing,
<a href="http://buildbot.rust-lang.org/bors/bors.html">bors</a> has 14 approved pull
requests waiting.</p>

<h2>Breaking Changes</h2>

<ul>
<li><code>std::num</code>&rsquo;s ongoing overhaul continues. It&rsquo;s going to be drastically
simplified, and not try to be a general-purpose numeric library.
<a href="https://github.com/bjz/num-rs">num-rs</a> is intended to provide some base
algebraic types. <a href="https://github.com/mozilla/rust/pull/11504">#11504</a> removes
gamma/bessel and does some cleanup of cmath.
<a href="https://github.com/mozilla/rust/pull/11548">#11548</a> merges Bitwise and
BitCount and removes Bounded and Bitwise from the prelude.
<a href="https://github.com/mozilla/rust/pull/11622">#11622</a> simplifies Primitive.</li>
<li>Destructuring <code>@</code> patterns are <a href="https://github.com/mozilla/rust/pull/11305">no longer
supported</a>.</li>
<li>The return type of <code>Chan::try_recv</code> has been extended to <a href="https://github.com/mozilla/rust/pull/11112">indicate why it
did not return a value</a>. That is,
whether there was legitimately no value, or if the other end had hung up.</li>
<li>Disk-relative paths on Windows <a href="https://github.com/mozilla/rust/pull/11579">are now properly
generated</a> when joining two paths.</li>
<li>FromBase64 and FromHex <a href="https://github.com/mozilla/rust/pull/11597">now use error
enums</a>.</li>
<li><code>std::io</code> <a href="https://github.com/mozilla/rust/pull/11598">has been shuffled around a
bit</a>.</li>
<li>(Almost?) all iterator types <a href="https://github.com/mozilla/rust/pull/11001">have been
renamed</a>.</li>
<li>unsafe functions can <a href="https://github.com/mozilla/rust/pull/11605">no longer be coerced to
closures</a>.</li>
<li>Unnecessary (useless) visibility modifiers on <code>use</code> and <code>extern mod</code> <a href="https://github.com/mozilla/rust/pull/11607">are
now forbidden</a>.</li>
<li>Building on last week&rsquo;s per-task stdout/stderr, <a href="https://github.com/mozilla/rust/pull/11620">rustc&rsquo;s error reporting has
been cleaned up significantly</a>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>Externally loadable syntax extensions <a href="https://github.com/mozilla/rust/pull/11151">have
landed</a>! We can now write
syntax extensions outside of the compiler, and export macros.</li>
<li>The &ldquo;rvalue lifetime&rdquo; issue has seen some <a href="https://github.com/mozilla/rust/pull/11585">significant work put into
it</a>. Notably, <code>for x in [1, 2, 3,
4].iter() { .. }</code> should now work, among many other papercut annoyances with
rvalues.</li>
<li>Error messages involving inferred integer types <a href="https://github.com/mozilla/rust/pull/11513">are now much more
sane</a>. Rather than <code>&lt;V0&gt;</code> or
<code>&lt;VI1&gt;</code>, it now prints <code>&lt;generic integer #0&gt;</code> etc.</li>
<li>Accidentally including a semicolon on the last line of a function <a href="https://github.com/mozilla/rust/pull/11482">now has a
better error message</a>, if the
types line up.</li>
<li>Some bugs with trait object coercion <a href="https://github.com/mozilla/rust/pull/11525">have been
fixed</a>.</li>
<li>The runtime <a href="https://github.com/mozilla/rust/pull/11501">now has its own
documentation</a>, viewable
<a href="http://static.rust-lang.org/doc/master/guide-runtime.html">here</a>.</li>
<li>rustdoc&rsquo;s search is now <a href="https://github.com/mozilla/rust/pull/11438">more
forgiving</a> on the input it
accepts.</li>
<li>Inserting into tries has been optimized significantly, <a href="https://github.com/mozilla/rust/pull/11546">with no unsafe
code</a>. Its iterator has <a href="https://github.com/mozilla/rust/pull/11497">also been
optimized</a>, albeit with unsafe
code.</li>
<li><a href="https://github.com/mozilla/rust/pull/11535">The reference-counting headers have been
removed</a>. The associated
&ldquo;managed-unique&rdquo; concept <a href="https://github.com/mozilla/rust/pull/11565">has also been
removed</a>.</li>
<li>The recent OS X 10.9 breakage <a href="https://github.com/mozilla/rust/pull/11604">should be
fixed</a>, as we will no longer use
<code>ar s</code> on that platform.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Clinton Ryan</li>
<li>Derek Guenther</li>
<li>Lucy</li>
<li>Petter Remen</li>
<li>Shamir Khodzha</li>
<li>Yehuda Katz</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-14">weekly
meeting</a>
discussed associated function resolution, changes to our calling convention
(specifically the fate of the ubiquitous environment pointer), how we want to
handle feature freeze, static items with destructors, and documentation on
primitives.</p>

<h1>Quotes of the Week</h1>

<blockquote><p>who says you can&#8217;t make money selling a compiler? You can, as long as you<br/>convince people it&#8217;s a video game</p><footer><strong>tjc on the Rust-the-game/Rust-the-language confusion</strong></footer></blockquote>




<blockquote><p>who needs pure functional when you have pure cool?</p><footer><strong>eddyb</strong></footer></blockquote>


<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary
test cases for the Rust language.</p>

<p>This week, we landed 22 PRs. There will be a Servo workweek in the
Mozilla San Francisco office next week, Tuesday through Friday.</p>

<h2>Notable additions</h2>

<ul>
<li>Jack Moffitt landed the huge Rust upgrade
<a href="https://github.com/mozilla/servo/pull/1473">#1473</a>, bringing us very close to
the 0.9 release. Hooray!</li>
<li>Lars Bergstrom got NVidia-on-Linux working in
<a href="https://github.com/mozilla/servo/pull/1487">#1487</a> and fixed the content test
reliability in <a href="https://github.com/mozilla/servo/pull/1500">#1500</a>.</li>
<li>Tetsuharu Ohzeki implemented <code>removeAttribute</code> on Element in
<a href="https://github.com/mozilla/servo/pull/1448">#1448</a>.</li>
<li>jgraham landed innerHTML support
<a href="https://github.com/mozilla/servo/pull/1450">#1450</a>.</li>
<li>Bruno Abinader implemented several fixes related to DOMImplementation:
<a href="https://github.com/mozilla/servo/pull/1497">#1497</a>,
<a href="https://github.com/mozilla/servo/pull/1488">#1488</a>.</li>
<li>Corey Richardson fixed up an error case in startup on Linux in
<a href="https://github.com/mozilla/servo/pull/1502">#1502</a>.</li>
<li>Isabelle Carter landed the initial work for handling <code>position:fixed</code> in
<a href="https://github.com/mozilla/servo/pull/1440">#1440</a>.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Corey Richardson</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-13">meeting</a>, we
discussed the need to clean up our test harnesses, the removal of <code>@</code> in
support of the next Rust upgrade, and the workweek..</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="https://github.com/DaGenix/rust-crypto/pull/21">The first pure-Rust AES
implementation</a>. According to
enix in IRC, this is also the first bit slicing implementation in a high level
language (ie, not assembly or a port of assembly).</li>
<li><a href="https://github.com/nickdesaulniers/rust-re2">rust-re2</a>, re2 bindings</li>
<li><a href="http://words.steveklabnik.com/a-30-minute-introduction-to-rust">A 30 Minute Introduction to
Rust</a></li>
<li><a href="https://github.com/shilgapira/ObjCrust">ObjCrust</a>, building an iOS static
library with Rust.A</li>
<li><a href="http://cosmic.mearie.org/2014/01/periodic-table-of-rust-types/">The Periodic Table of Rust
Types</a></li>
<li><a href="https://github.com/dnaq/sodiumoxide">Sodium Oxide</a>, NaCl bindings, updated
to 0.9</li>
<li><a href="http://dwrensha.github.io/capnproto-rust/2014/01/15/benchmark-update.html">capnproto-rust benchmark
update</a></li>
<li><a href="https://github.com/sfackler/rust-phf">rust-phf</a>, compile-time hash maps. It
also serves as a demonstration of loadable syntax extensions!</li>
<li><a href="http://www.reddit.com/r/rust/comments/1v9rgp/rust_has_dowhile_loops/">Rust has do-while
loops</a>,
a dirty hack no one should use.</li>
<li><a href="http://paulkoerbitz.de/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html">Understanding Pointers, Ownership, and Lifetimes in
Rust</a></li>
<li><a href="http://hydrocodedesign.com/2014/01/17/jit-just-in-time-compiler-rust/">A Just-in-time Compiler (Written) In
Rust</a></li>
<li><a href="https://github.com/alexcrichton/jba/tree/rust">jba</a>, a GameBoy emulator
written in Rust.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The State of Rust 0.9]]></title>
    <link href="http://cmr.github.io/blog/2014/01/12/the-state-of-rust-0-dot-9/"/>
    <updated>2014-01-12T21:13:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/12/the-state-of-rust-0-dot-9</id>
    <content type="html"><![CDATA[<p><a href="http://www.rust-lang.org/">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is my post-mortem of the past 3 months, the
current status of Rust, and its future.</p>

<!-- more -->


<h1>Compiler</h1>

<p>The compiler saw a fair bit of work this release cycle. Some polish has gone
into <code>mut</code> in patterns. For example, <code>let (mut x, y) = foo();</code> now works as
expected. We now have &ldquo;feature gates&rdquo;, or feature flags, that let us mark
certain features as either deprecated or experimental and subject to change.
<code>@mut</code> has been removed. Slice representation has been optimized (we now store
number of elements, not number of bytes). Soundness bugs have been fixed, and
some bugs in our name resolution have been patched up. We have a dead code
warning, stability annotations, crate introspection, and lots more.</p>

<p>On top of all that, we also have support for static linking and LTO. Compiler
performance has further improved. From the 112ms compiling <code>fn main() { }</code> in
0.8, we now do 91ms with static linking (the default) and 68ms for dynamic
linking (<code>-Z prefer-dynamic</code>). Our debuginfo is in a much better state. The
entire codebase (compiler + standard library + tools) compiles with it, and
<a href="https://github.com/mozilla/servo/">Servo</a> compiles with it by default.</p>

<h1>Runtime</h1>

<p>The runtime has seen tons of work this release. <code>std::io</code> has been swapped
over to the new runtime, which is written entirely in Rust. We now support
both 1:1 and M:N threading models, their respective runtimes supplied by
&ldquo;libnative&rdquo; and &ldquo;libgreen&rdquo;. libgreen (the &ldquo;old new runtime&rdquo;) has seen some
performance improvements. Chris Morgan reports that the scalability of his
<a href="https://github.com/chris-morgan/rust-http/">rust-http</a> benchmarks has
improved from 1.25x to 1.75x from 1 to 8 concurrent request handlers. On my
machine, using libnative gives an impressive performance boost, pushing us
ahead of go&rsquo;s performance (graph below). libnative has yet to see any optimization work.
David Renshaw reports roughly a 2x performance increase on his <a href="http://dwrensha.github.io/capnproto-rust/2013/11/16/benchmark.html">capn proto
benchmark</a>
when using libnative for I/O.</p>

<p><noscript></p>

<pre><code>&lt;img src="https://docs.google.com/a/octayn.net/spreadsheet/oimg?key=0ArjzeYh7LqL2dENRREdRbDljajR4LWt1RlozM2YyY0E&amp;oid=1&amp;zx=xnqmqanhavt" /&gt;
&lt;p&gt;(This would be interactive if you had JavaScript enabled)&lt;/p&gt;
</code></pre>

<p></noscript></p>

<script type="text/javascript" src="http://cmr.github.io//ajax.googleapis.com/ajax/static/modules/gviz/1.0/chart.js"> {"dataSourceUrl":"//docs.google.com/a/octayn.net/spreadsheet/tq?key=0ArjzeYh7LqL2dENRREdRbDljajR4LWt1RlozM2YyY0E&transpose=0&headers=1&range=A1%3AE6&gid=0&pub=1","options":{"titleTextStyle":{"bold":true,"color":"#000","fontSize":16},"series":{"0":{"errorBars":{"errorType":"none","magnitude":10}}},"animation":{"duration":500},"width":600,"hAxis":{"title":"Concurrency (\"threads\")","useFormatFromData":true,"minValue":null,"viewWindowMode":null,"viewWindow":null,"maxValue":null},"vAxes":[{"useFormatFromData":true,"title":"Requests / second","minorGridlines":{"count":"4"},"minValue":null,"gridlines":{"count":"5"},"logScale":false,"viewWindow":{"max":null,"min":null},"maxValue":null},{"useFormatFromData":true,"minValue":null,"logScale":false,"viewWindow":{"max":null,"min":null},"maxValue":null}],"booleanRole":"certainty","title":"rust-http comparison benchmark","height":371,"domainAxis":{"direction":1},"legend":"right","focusTarget":"series","useFirstColumnAsDomain":true,"isStacked":false,"tooltip":{"trigger":"none"}},"state":{},"view":{"columns":[{"calc":"stringify","type":"string","sourceColumn":0},1,2,3,4]},"isDefaultVisualization":false,"chartType":"ColumnChart","chartName":"Chart 1"} </script>


<p>You can run the benchmarks yourself. <code>cd comparisons; python run.py</code>. You&rsquo;ll
need to build rust-http first (<code>make</code>), and have go, nodejs, and ab (apache
bench) installed.</p>

<h1>Documentation</h1>

<p>Our documentation hasn&rsquo;t been in the best state in the past. It still isn&rsquo;t
where it should be, but <a href="http://static.rust-lang.org/doc/master/index.html">they have been
reorganized</a>, on top of
seeing the usual work. We&rsquo;re in the process of moving all of the documentation
from the wiki onto that site, to make it easier to find and search. Steve
Klabnik gave a <a href="https://air.mozilla.org/rust-meetup-december-2013/">critical but very constructive
presentation</a> at the Bay
Area meetup about what we are doing wrong and how we can improve. At the same
meetup, Chris Morgan talked about the technologies we use in our documentation
stack. In the long run, the consensus seems to be that reStructuredText and
Sphinx are they way forward. Thanks to the rustdoc rewrite, it will be able to
have first-class status as a documentation backend.</p>

<h1>The Future</h1>

<p>For 0.10, we have <a href="http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/">Dynamically Sized Types
(DST)</a> to
look forward to, as well as the removal of <code>@</code> pointers. <code>box</code>, aka &ldquo;placement
new&rdquo;, along with smart pointer sugar (overloadable dereferencing/borrowing),
should also be in by then. We may also see an actual garbage collector.</p>

<h1>Is Rust Ready Yet?</h1>

<p>Nope. It still has some work to do. 1.0 is estimated before the end of 2014,
though that may slip depending on how things land. An early estimate puts the
release over the summer! We still need a robust package manager. We now have
<a href="http://rust-ci.org/">rust-ci</a>, which makes it easy to keep code up to date,
and know if a library is up to date.</p>

<p>The breaking changes, especially language changes, are slowing down, besides
bug fixes. The standard library is also starting to shake itself out, though
it still has a lot of work before they will be stable. There are currently two
known uses of Rust in production: <a href="http://www.tilde.io/">Tilde</a> is using it in
<a href="https://www.skylight.io/">Skylight</a>, and <a href="http://opendns.com">OpenDNS</a> is
using it for <a href="http://labs.umbrella.com/2013/10/04/zeromq-helping-us-block-malicious-domains/">real-time data
processing</a>.</p>

<p>It has been a good release, and the next will be even better. Want to get
involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.
Want to follow development? I post a <a href="http://cmr.github.io/blog/categories/this-week-in-rust/">weekly
newsletter</a>
summarizing the important changes. There is also a
<a href="http://reddit.com/r/rust">subreddit</a>. Here&rsquo;s to an awesome 0.10!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Rust]]></title>
    <link href="http://cmr.github.io/blog/2014/01/11/this-week-in-rust/"/>
    <updated>2014-01-11T16:23:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/11/this-week-in-rust</id>
    <content type="html"><![CDATA[<p>Hello and welcome to another issue of <em>This Week in Rust</em>!
<a href="http://rust-lang.org">Rust</a> is a systems language pursuing the trifecta:
safe, concurrent, and fast. This is a weekly summary of its progress and
community. Want something mentioned? <a href="mailto:corey@octayn.net?subject=This%20Week%20in%20Rust%20Suggestion">Send me an
email!</a>
Want to get involved? <a href="https://github.com/mozilla/rust/wiki/Note-guide-for-new-contributors">We love
contributions</a>.</p>

<p>0.9 was released this week, bringing with it a restructuring of our
documentation and the usual influx of attention.</p>

<!-- more -->


<h1>What&rsquo;s cooking on master?</h1>

<p>57 pull requests were merged this week.</p>

<h2>Breaking Changes</h2>

<ul>
<li>Float literals are now <a href="https://github.com/mozilla/rust/pull/11480">more
strict</a>. Octal and hex float
literals are no longer allowed.</li>
<li>A nasty soundness bug <a href="http://www.reddit.com/r/rust/comments/1uxbgm/moving_ownership_via_borrowed_reference/">reported on
reddit</a>
<a href="https://github.com/mozilla/rust/pull/11465">has been fixed</a>.</li>
<li><code>print</code> and <code>println</code> <a href="https://github.com/mozilla/rust/pull/11416">have been removed from the
prelude</a>. Use the <code>print!</code> and
<code>println!</code> macros instead.</li>
<li><code>Rc</code> <a href="https://github.com/mozilla/rust/pull/10926/files">now supports weak
pointers</a>, and it no longer
requires the wrapped type to be Freeze or Send. That is, it no longer
statically avoids cycles using the type system. It was found to be too
restrictive. The only constructor is now <code>Rc::new</code>.</li>
<li>The <code>eof</code> method on <code>Reader</code> <a href="https://github.com/mozilla/rust/pull/11376">has been
removed</a>, as only files really
know when they are at eof. It is now a method on the types it makes sense for
<a href="https://github.com/mozilla/rust/pull/11437">such as <code>MemReader</code> and
<code>BufReader</code></a>.</li>
<li><code>std::num</code> is seeing some simplification. <a href="https://github.com/mozilla/rust/pull/11412">Many traits have been merged into
<code>Real</code></a>.</li>
<li>Similarly, <a href="https://github.com/mozilla/rust/pull/11402"><code>ApproxEq</code> has been
removed</a>.</li>
<li>The <code>std::io::Decorator</code> trait <a href="https://github.com/mozilla/rust/pull/11394">has been
removed</a>.</li>
<li>A nasty resolve bug <a href="https://github.com/mozilla/rust/pull/11370">has been
fixed</a>. Importing a trait made it
available to all child modules; now it is only available in the module that
imported it, as it should be.</li>
<li>Some <a href="https://github.com/mozilla/rust/pull/10854">method renaming</a> has been
done to <code>Option</code>. <code>map_default</code> is now <code>map_or</code> and <code>mutate_default</code> is now
<code>mutate_or_set</code>.</li>
</ul>


<h2>Other Changes</h2>

<ul>
<li>A <a href="https://github.com/mozilla/rust/pull/11329">lint for unnecessary casts</a>
has been added. It is set to allow by default.</li>
<li><a href="https://github.com/mozilla/rust/pull/11342">Mutable iterators</a> have been
added to <code>std::trie</code>.</li>
<li>A bug in rustpkg preventing it from finding any static libraries, and
libnative, <a href="https://github.com/mozilla/rust/pull/11338">has been fixed</a>.</li>
<li><code>u64_from_be_bytes</code> <a href="https://github.com/mozilla/rust/pull/11448">has seen some
optimization</a>, it is 3-6x faster.</li>
<li><code>box</code> has been
<a href="https://github.com/mozilla/rust/pull/11055">kinda-implemented</a>. <code>box(GC)</code> and
<code>box(HEAP)</code> now work.</li>
<li>Typed arenas <a href="https://github.com/mozilla/rust/pull/11358">have been added</a>.
They&rsquo;re really fast!</li>
<li><code>stderr</code>/<code>stdout</code> is now
<a href="https://github.com/mozilla/rust/pull/11353">per-task</a>, which will allow
capturing or redirecting a task&rsquo;s output.</li>
</ul>


<h2>New Contributors</h2>

<ul>
<li>Andrew Chin</li>
<li>Clinton Ryan</li>
<li>Derek Chiang</li>
<li>Mick Koch</li>
<li>Nick Cameron</li>
<li>Niels langager Ellegaard</li>
<li>Nif Ward</li>
<li>Raphael Catolino</li>
<li>Rich Lane</li>
<li>Dzmitry Malyshau</li>
</ul>


<h1>Weekly Meeting</h1>

<p>The <a href="https://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-07">weekly
meeting</a>
discussed Windows XP support, bounded channels, the Rc changes, using guard
pages, loadable syntax extensions, and functions that fail.</p>

<h1>Quotes of the Week</h1>

<p>&ldquo;[I] find it easy to get lost in this file.&rdquo; &ndash;
<a href="https://github.com/mozilla/rust/pull/11472/files#r8810362">kud1ing</a> on
<code>libc.rs</code>
&ndash; &ldquo;A language is more than just semantics, syntax, and an implementation &ndash;
it&rsquo;s about an ecosystem and a community. Without that it dies.&rdquo; &ndash;
<a href="https://botbot.me/mozilla/rust-internals/msg/9689869/">bjz</a></p>

<h1>This Week in Servo</h1>

<p>Servo is a web browser engine written in Rust and is one of the primary test
cases for the Rust language.</p>

<p>The Servo tree has been mostly frozen for a large part of this week, as the
nearly month-long Rust upgrade is finally getting close and we wanted to avoid
additional rebases. We did land 7 PRs, many with associated fixes, however.</p>

<h2>Notable additions</h2>

<ul>
<li>Patrick Kim fixed anonymous boxes and images disappearing during line
breaking in <a href="https://github.com/mozilla/servo/pull/1461">#1461</a> and
<a href="https://github.com/mozilla/servo/pull/1463">#1463</a>.</li>
<li>Patrick Walton fixed a race issue with window sizes and script code in
<a href="https://github.com/mozilla/servo/pull/1409">#1409</a>.</li>
<li>Jaeman Park landed CSS parsing and selector matching for pseudo element
:before and :after in <a href="https://github.com/mozilla/servo/pull/1464">#1464</a>.</li>
<li>Bruno Abinder made some DOM additions in
<a href="https://github.com/mozilla/servo/pull/1466">#1466</a> and
<a href="https://github.com/mozilla/servo/pull/1472">#1472</a>.</li>
</ul>


<h2>Meetings</h2>

<p>In this week&rsquo;s
<a href="https://github.com/mozilla/servo/wiki/Meeting-2014-01-06">meeting</a>, we
discussed the upcoming workweek, the Rust upgrade, ARM buildbots for Rust and
Servo, and some research we&rsquo;re doing into the breakdown of page load.</p>

<h1>Announcements, etc</h1>

<ul>
<li><a href="http://www.meetup.com/Rust-Bay-Area/events/153909222/">Bay Area Rust Meetup:
1/28/2014</a></li>
<li><a href="http://www.youtube.com/watch?v=gfCtbGiHcg0">The Rust language: memory, ownership and
lifetimes</a>,
Niko&rsquo;s presentation at Linux.conf.au</li>
<li><a href="http://www.reddit.com/r/rust/comments/1uy7rt/an_appeal_for_correct_capable_futureproof_math_in/">An appeal for correct, capable, future-proof math in nascent programming
languages</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1v10ac/thehydroimpulserustwebsite/">An in-progress redesign of the
website</a></li>
<li><a href="http://www.reddit.com/r/rust/comments/1v104e/combining_rusthttp_with_routerecognizerrs_to/">Combining rust-http with route-recognizer.rs to create routable
HTTP</a></li>
<li><a href="https://github.com/mneumann/rust-toml">A TOML configuration file parser</a></li>
<li><a href="http://llvm.lyngvig.org/Articles/Mapping-High-Level-Constructs-to-LLVM-IR">Mapping High-Level Constructs to LLVM
IR</a>,
a peek at what drives the underbelly of the compiler</li>
<li><a href="https://github.com/mozilla/rust/pull/11399">Add garbage collector to
<code>std::gc</code></a></li>
<li><a href="https://github.com/HeroesGrave/rust-workspace">rust-workspace</a>, a simple
shell to make maintaining Rust projects easier</li>
<li><a href="http://www.reddit.com/r/rust/comments/1usupv/semantic_code_browser_for_rust/">Semantic code browser for
Rust</a></li>
<li><a href="http://smallcultfollowing.com/babysteps/blog/2014/01/09/rvalue-lifetimes-in-rust/">Rvalue Lifetimes in
Rust</a></li>
<li><a href="http://steveklabnik.github.io/nobody_knows_rust/#/">Nobody Knows Rust &ndash; Steve Klabnik&rsquo;s slides</a></li>
<li><a href="https://mail.mozilla.org/pipermail/rust-dev/2014-January/007753.html">0.9 Release
Announcement</a></li>
<li><a href="https://github.com/cmr/rust-logo-3d/blob/master/rlogo.stl">A 3d-printable Rust
logo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading Old Things]]></title>
    <link href="http://cmr.github.io/blog/2014/01/06/reading-old-things/"/>
    <updated>2014-01-06T19:00:00-05:00</updated>
    <id>http://cmr.github.io/blog/2014/01/06/reading-old-things</id>
    <content type="html"><![CDATA[<p>I&rsquo;m learning Haskell. I&rsquo;m doing this for many reasons, but the most important
is to expand my knowledge and form a more principled understanding of
languages. So, I&rsquo;m reading a <a href="http://www.stanford.edu/class/cs242/readings/backus.pdf">paper</a>. It&rsquo;s a very good paper, but the
thing most striking about it is its age. 1977! My father was five. It occurred
to me that I read a lot of old things. I grab interesting books from book
sales, yard sales, thrift shops, and the &ldquo;Transfer Station &amp; Recycling Center&rdquo;
(aka the dump). Most of the time they&rsquo;re garbage, but I sometimes find true
gems. It&rsquo;s how I discovered Plato&rsquo;s <em>The Republic</em>, among other things. The
best part about reading older books is that they often strip away decades of
intellectual cruft that can accumulate around a subject, be it jargon or just
gross mutation of ideas.  Especially reading some foundational papers, or
books that were written when a subject was still young and exciting, a very
good historical perspective can be developed. I often find a conceptual
clarity that most new books simply don&rsquo;t give.</p>

<p>On the other hand, I&rsquo;ve yet to find old code that was truly worth reading. Old
code is frequently buggy, poorly written, or just plain unfinished. No code
remains dormant for too long. The only exception I can think of is TeX.</p>

<p>Observation bias? Perhaps. It could be that that&rsquo;s the only reason these books
have survived so long. Try reading some older books and papers. <a href="mailto:corey@octayn.net">Let me know
how it goes</a>. Have some suggestions for great books
and papers, old or others? I&rsquo;d like to hear those too.</p>
]]></content>
  </entry>
  
</feed>
